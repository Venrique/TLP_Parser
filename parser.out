Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_LOGICO
    ASIGNAR_DIV
    ASIGNAR_MULT
    ASIGNAR_RESTA
    ASIGNAR_SUMA
    CADENA
    COMILLA_DOBLE
    COMILLA_SIMPLE
    COMPARAR_DIF
    DECREMENTO
    DIR_DEFINIR
    DIR_INCLUIR
    DIR_UNDEFINIR
    DIVISION_ENTERA
    ESTATICO
    INCREMENTO
    MAYOR_IGUAL
    MENOR_IGUAL
    NEGACION
    OR_LOGICO
    PUNTO
    eof

Grammar

Rule 0     S' -> program
Rule 1     program -> SVar program
Rule 2     program -> SStruct SInst
Rule 3     program -> empty
Rule 4     empty -> <empty>
Rule 5     SInst -> SVar SInst
Rule 6     SInst -> SIfElse SInst
Rule 7     SInst -> SWhile SInst
Rule 8     SInst -> SDoWhile SInst
Rule 9     SInst -> SFor SInst
Rule 10    SInst -> SRet SInst
Rule 11    SInst -> SArr SInst
Rule 12    SInst -> SBreak SInst
Rule 13    SInst -> empty
Rule 14    SOpe -> AOpe ZOpe
Rule 15    ZOpe -> SUMAR AOpe ZOpe
Rule 16    ZOpe -> RESTAR AOpe ZOpe
Rule 17    ZOpe -> COMPARAR_IGUAL AOpe ZOpe
Rule 18    ZOpe -> MAYOR_QUE AOpe ZOpe
Rule 19    ZOpe -> MENOR_QUE AOpe ZOpe
Rule 20    ZOpe -> empty
Rule 21    AOpe -> COpe BOpe
Rule 22    BOpe -> MULTIPLICAR COpe BOpe
Rule 23    BOpe -> DIVIDIR COpe BOpe
Rule 24    BOpe -> MODULO COpe BOpe
Rule 25    BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe
Rule 26    BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe
Rule 27    BOpe -> empty
Rule 28    DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
Rule 29    DOpe -> empty
Rule 30    COpe -> PAREN_IZQ SOpe PAREN_DER
Rule 31    COpe -> IDENTIFICADOR DOpe
Rule 32    COpe -> NUMERO_DECIMAL
Rule 33    COpe -> NUMERO_ENTERO
Rule 34    SVar -> STipos IDENTIFICADOR FVar
Rule 35    SVar -> IDENTIFICADOR DVar
Rule 36    AVar -> ASIGNAR BVar
Rule 37    AVar -> COMA IDENTIFICADOR AVar
Rule 38    AVar -> PUNTO_COMA
Rule 39    BVar -> SOpe CVar
Rule 40    BVar -> IDENTIFICADOR SFunc AVar
Rule 41    CVar -> PUNTO_COMA
Rule 42    CVar -> COMA BVar
Rule 43    DVar -> ASIGNAR EVar
Rule 44    DVar -> PUNTO_COMA
Rule 45    EVar -> SOpe PUNTO_COMA
Rule 46    EVar -> IDENTIFICADOR SFunc DVar
Rule 47    FVar -> AVar
Rule 48    FVar -> PAREN_IZQ GVar
Rule 49    GVar -> STipos HVar
Rule 50    GVar -> PAREN_DER JVar
Rule 51    HVar -> IDENTIFICADOR IVar
Rule 52    HVar -> IVar
Rule 53    IVar -> COMA GVar
Rule 54    IVar -> PAREN_DER JVar
Rule 55    JVar -> PUNTO_COMA
Rule 56    JVar -> LLAVE_IZQ SInst LLAVE_DER
Rule 57    STipos -> TIPO_ENTERO
Rule 58    STipos -> TIPO_CADENA
Rule 59    STipos -> TIPO_LARGO
Rule 60    STipos -> TIPO_VACIO
Rule 61    STipos -> TIPO_CARACTER
Rule 62    STipos -> TIPO_FLOTANTE
Rule 63    STipos -> TIPO_DOUBLE
Rule 64    SFunc -> PAREN_IZQ AFunc
Rule 65    SFunc -> empty
Rule 66    AFunc -> PAREN_DER
Rule 67    AFunc -> IDENTIFICADOR BFunc
Rule 68    BFunc -> COMA IDENTIFICADOR BFunc
Rule 69    BFunc -> PAREN_DER
Rule 70    SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
Rule 71    AIfElse -> SInst LLAVE_DER BIfElse
Rule 72    BIfElse -> empty
Rule 73    BIfElse -> CASO_CONTRARIO CIfElse
Rule 74    CIfElse -> LLAVE_IZQ AIfElse
Rule 75    CIfElse -> SIfElse
Rule 76    SRet -> RETORNAR ARet
Rule 77    ARet -> SOpe PUNTO_COMA
Rule 78    ARet -> CARACTER PUNTO_COMA
Rule 79    SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
Rule 80    SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr
Rule 81    AArr -> NUMERO_ENTERO CORCHETE_DER BArr
Rule 82    AArr -> CORCHETE_DER CArr
Rule 83    BArr -> CArr
Rule 84    BArr -> PUNTO_COMA
Rule 85    CArr -> ASIGNAR LLAVE_IZQ DArr
Rule 86    DArr -> SOpe EArr
Rule 87    DArr -> CARACTER EArr
Rule 88    EArr -> COMA DArr
Rule 89    EArr -> LLAVE_DER PUNTO_COMA
Rule 90    SStruct -> ESTRUCTURA AStruct
Rule 91    AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct
Rule 92    AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct
Rule 93    BStruct -> empty
Rule 94    BStruct -> STipos IDENTIFICADOR FStruct
Rule 95    CStruct -> PUNTO_COMA
Rule 96    CStruct -> DStruct
Rule 97    DStruct -> IDENTIFICADOR EStruct
Rule 98    EStruct -> COMA DStruct
Rule 99    EStruct -> PUNTO_COMA
Rule 100   FStruct -> PUNTO_COMA BStruct
Rule 101   FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct
Rule 102   SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
Rule 103   SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
Rule 104   SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
Rule 105   SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe
Rule 106   SDecVarFor -> STipos IDENTIFICADOR ADecVarFor
Rule 107   ADecVarFor -> ASIGNAR BDecVarFor
Rule 108   ADecVarFor -> COMA BDecVarFor
Rule 109   BDecVarFor -> SOpe CDecVarFor
Rule 110   CDecVarFor -> COMA BDecVarFor
Rule 111   CDecVarFor -> empty
Rule 112   SBreak -> ROMPER PUNTO_COMA

Terminals, with rules where they appear

AND_LOGICO           : 
AND_LOGICO_CONDICIONAL : 25
ASIGNAR              : 36 43 79 85 105 107
ASIGNAR_DIV          : 
ASIGNAR_MULT         : 
ASIGNAR_RESTA        : 
ASIGNAR_SUMA         : 
BUCLE_MIENTRAS       : 102 103
BUCLE_PARA           : 104
CADENA               : 
CARACTER             : 78 87
CASO_CONTRARIO       : 73
COMA                 : 37 42 53 68 88 98 108 110
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
COMPARAR_DIF         : 
COMPARAR_IGUAL       : 17
CONDICIONAL          : 70
CORCHETE_DER         : 28 79 81 82 101
CORCHETE_IZQ         : 28 79 80 101
DECREMENTO           : 
DIR_DEFINIR          : 
DIR_INCLUIR          : 
DIR_UNDEFINIR        : 
DIVIDIR              : 23
DIVISION_ENTERA      : 
ESTATICO             : 
ESTRUCTURA           : 90
HACER                : 103
IDENTIFICADOR        : 31 34 35 37 40 46 51 67 68 79 80 91 94 97 105 106
INCREMENTO           : 
LLAVE_DER            : 56 71 89 91 92 102 103 104
LLAVE_IZQ            : 56 70 74 85 91 92 102 103 104
MAYOR_IGUAL          : 
MAYOR_QUE            : 18
MENOR_IGUAL          : 
MENOR_QUE            : 19
MODULO               : 24
MULTIPLICAR          : 22
NEGACION             : 
NUMERO_DECIMAL       : 32
NUMERO_ENTERO        : 28 33 79 81 101
OR_LOGICO            : 
OR_LOGICO_CONDICIONAL : 26
PAREN_DER            : 30 50 54 66 69 70 102 103 104
PAREN_IZQ            : 30 48 64 70 102 103 104
PUNTO                : 
PUNTO_COMA           : 38 41 44 45 55 77 78 79 84 89 95 99 100 101 103 104 104 112
RESTAR               : 16
RETORNAR             : 76
ROMPER               : 112
SUMAR                : 15
TIPO_CADENA          : 58
TIPO_CARACTER        : 61
TIPO_DOUBLE          : 63
TIPO_ENTERO          : 57
TIPO_FLOTANTE        : 62
TIPO_LARGO           : 59
TIPO_VACIO           : 60
eof                  : 
error                : 

Nonterminals, with rules where they appear

AArr                 : 80
ADecVarFor           : 106
AFunc                : 64
AIfElse              : 70 74
AOpe                 : 14 15 16 17 18 19
ARet                 : 76
AStruct              : 90
AVar                 : 37 40 47
BArr                 : 81
BDecVarFor           : 107 108 110
BFunc                : 67 68
BIfElse              : 71
BOpe                 : 21 22 23 24 25 26
BStruct              : 91 92 100 101
BVar                 : 36 42
CArr                 : 82 83
CDecVarFor           : 109
CIfElse              : 73
COpe                 : 21 22 23 24 25 26
CStruct              : 91
CVar                 : 39
DArr                 : 85 88
DOpe                 : 31
DStruct              : 92 96 98
DVar                 : 35 46
EArr                 : 86 87
EStruct              : 97
EVar                 : 43
FStruct              : 94
FVar                 : 34
GVar                 : 48 53
HVar                 : 49
IVar                 : 51 52
JVar                 : 50 54
SArr                 : 11
SAsigVarFor          : 104
SBreak               : 12
SDecVarFor           : 104
SDoWhile             : 8
SFor                 : 9
SFunc                : 40 46
SIfElse              : 6 75
SInst                : 2 5 6 7 8 9 10 11 12 56 71 102 103 104
SOpe                 : 30 39 45 70 77 79 86 102 103 104 105 109
SRet                 : 10
SStruct              : 2
STipos               : 34 49 80 94 106
SVar                 : 1 5
SWhile               : 7
ZOpe                 : 14 15 16 17 18 19
empty                : 3 13 20 27 29 65 72 93 111
program              : 1 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . SVar program
    (2) program -> . SStruct SInst
    (3) program -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (90) SStruct -> . ESTRUCTURA AStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 6
    ESTRUCTURA      shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    program                        shift and go to state 1
    SVar                           shift and go to state 2
    SStruct                        shift and go to state 3
    empty                          shift and go to state 4
    STipos                         shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> SVar . program
    (1) program -> . SVar program
    (2) program -> . SStruct SInst
    (3) program -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (90) SStruct -> . ESTRUCTURA AStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 6
    ESTRUCTURA      shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SVar                           shift and go to state 2
    program                        shift and go to state 15
    SStruct                        shift and go to state 3
    empty                          shift and go to state 4
    STipos                         shift and go to state 5

state 3

    (2) program -> SStruct . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 16
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 4

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 5

    (34) SVar -> STipos . IDENTIFICADOR FVar

    IDENTIFICADOR   shift and go to state 34


state 6

    (35) SVar -> IDENTIFICADOR . DVar
    (43) DVar -> . ASIGNAR EVar
    (44) DVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 35

state 7

    (90) SStruct -> ESTRUCTURA . AStruct
    (91) AStruct -> . IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct
    (92) AStruct -> . LLAVE_IZQ BStruct LLAVE_DER DStruct

    IDENTIFICADOR   shift and go to state 39
    LLAVE_IZQ       shift and go to state 40

    AStruct                        shift and go to state 38

state 8

    (57) STipos -> TIPO_ENTERO .

    IDENTIFICADOR   reduce using rule 57 (STipos -> TIPO_ENTERO .)
    COMA            reduce using rule 57 (STipos -> TIPO_ENTERO .)
    PAREN_DER       reduce using rule 57 (STipos -> TIPO_ENTERO .)


state 9

    (58) STipos -> TIPO_CADENA .

    IDENTIFICADOR   reduce using rule 58 (STipos -> TIPO_CADENA .)
    COMA            reduce using rule 58 (STipos -> TIPO_CADENA .)
    PAREN_DER       reduce using rule 58 (STipos -> TIPO_CADENA .)


state 10

    (59) STipos -> TIPO_LARGO .

    IDENTIFICADOR   reduce using rule 59 (STipos -> TIPO_LARGO .)
    COMA            reduce using rule 59 (STipos -> TIPO_LARGO .)
    PAREN_DER       reduce using rule 59 (STipos -> TIPO_LARGO .)


state 11

    (60) STipos -> TIPO_VACIO .

    IDENTIFICADOR   reduce using rule 60 (STipos -> TIPO_VACIO .)
    COMA            reduce using rule 60 (STipos -> TIPO_VACIO .)
    PAREN_DER       reduce using rule 60 (STipos -> TIPO_VACIO .)


state 12

    (61) STipos -> TIPO_CARACTER .

    IDENTIFICADOR   reduce using rule 61 (STipos -> TIPO_CARACTER .)
    COMA            reduce using rule 61 (STipos -> TIPO_CARACTER .)
    PAREN_DER       reduce using rule 61 (STipos -> TIPO_CARACTER .)


state 13

    (62) STipos -> TIPO_FLOTANTE .

    IDENTIFICADOR   reduce using rule 62 (STipos -> TIPO_FLOTANTE .)
    COMA            reduce using rule 62 (STipos -> TIPO_FLOTANTE .)
    PAREN_DER       reduce using rule 62 (STipos -> TIPO_FLOTANTE .)


state 14

    (63) STipos -> TIPO_DOUBLE .

    IDENTIFICADOR   reduce using rule 63 (STipos -> TIPO_DOUBLE .)
    COMA            reduce using rule 63 (STipos -> TIPO_DOUBLE .)
    PAREN_DER       reduce using rule 63 (STipos -> TIPO_DOUBLE .)


state 15

    (1) program -> SVar program .

    $end            reduce using rule 1 (program -> SVar program .)


state 16

    (2) program -> SStruct SInst .

    $end            reduce using rule 2 (program -> SStruct SInst .)


state 17

    (5) SInst -> SVar . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SVar                           shift and go to state 17
    SInst                          shift and go to state 41
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 18

    (6) SInst -> SIfElse . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SIfElse                        shift and go to state 18
    SInst                          shift and go to state 42
    SVar                           shift and go to state 17
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 19

    (7) SInst -> SWhile . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SWhile                         shift and go to state 19
    SInst                          shift and go to state 43
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 20

    (8) SInst -> SDoWhile . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SDoWhile                       shift and go to state 20
    SInst                          shift and go to state 44
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 21

    (9) SInst -> SFor . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SFor                           shift and go to state 21
    SInst                          shift and go to state 45
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 22

    (10) SInst -> SRet . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SRet                           shift and go to state 22
    SInst                          shift and go to state 46
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 23

    (11) SInst -> SArr . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SArr                           shift and go to state 23
    SInst                          shift and go to state 47
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 24

    (12) SInst -> SBreak . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SBreak                         shift and go to state 24
    SInst                          shift and go to state 48
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 25

    (13) SInst -> empty .

    $end            reduce using rule 13 (SInst -> empty .)
    LLAVE_DER       reduce using rule 13 (SInst -> empty .)


state 26

    (34) SVar -> STipos . IDENTIFICADOR FVar
    (80) SArr -> STipos . IDENTIFICADOR CORCHETE_IZQ AArr

    IDENTIFICADOR   shift and go to state 49


state 27

    (35) SVar -> IDENTIFICADOR . DVar
    (79) SArr -> IDENTIFICADOR . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (43) DVar -> . ASIGNAR EVar
    (44) DVar -> . PUNTO_COMA

    CORCHETE_IZQ    shift and go to state 50
    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 35

state 28

    (70) SIfElse -> CONDICIONAL . PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse

    PAREN_IZQ       shift and go to state 51


state 29

    (102) SWhile -> BUCLE_MIENTRAS . PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_IZQ       shift and go to state 52


state 30

    (103) SDoWhile -> HACER . LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    LLAVE_IZQ       shift and go to state 53


state 31

    (104) SFor -> BUCLE_PARA . PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_IZQ       shift and go to state 54


state 32

    (76) SRet -> RETORNAR . ARet
    (77) ARet -> . SOpe PUNTO_COMA
    (78) ARet -> . CARACTER PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    CARACTER        shift and go to state 57
    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    ARet                           shift and go to state 55
    SOpe                           shift and go to state 56
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 33

    (112) SBreak -> ROMPER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 64


state 34

    (34) SVar -> STipos IDENTIFICADOR . FVar
    (47) FVar -> . AVar
    (48) FVar -> . PAREN_IZQ GVar
    (36) AVar -> . ASIGNAR BVar
    (37) AVar -> . COMA IDENTIFICADOR AVar
    (38) AVar -> . PUNTO_COMA

    PAREN_IZQ       shift and go to state 67
    ASIGNAR         shift and go to state 68
    COMA            shift and go to state 69
    PUNTO_COMA      shift and go to state 70

    FVar                           shift and go to state 65
    AVar                           shift and go to state 66

state 35

    (35) SVar -> IDENTIFICADOR DVar .

    IDENTIFICADOR   reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    ESTRUCTURA      reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_ENTERO     reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_CADENA     reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_LARGO      reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_VACIO      reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_CARACTER   reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_FLOTANTE   reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    TIPO_DOUBLE     reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    $end            reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    CONDICIONAL     reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    BUCLE_MIENTRAS  reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    HACER           reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    BUCLE_PARA      reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    RETORNAR        reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    ROMPER          reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)
    LLAVE_DER       reduce using rule 35 (SVar -> IDENTIFICADOR DVar .)


state 36

    (43) DVar -> ASIGNAR . EVar
    (45) EVar -> . SOpe PUNTO_COMA
    (46) EVar -> . IDENTIFICADOR SFunc DVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    IDENTIFICADOR   shift and go to state 73
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    EVar                           shift and go to state 71
    SOpe                           shift and go to state 72
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 37

    (44) DVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 44 (DVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 44 (DVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 44 (DVar -> PUNTO_COMA .)
    $end            reduce using rule 44 (DVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 44 (DVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 44 (DVar -> PUNTO_COMA .)
    HACER           reduce using rule 44 (DVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 44 (DVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 44 (DVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 44 (DVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 44 (DVar -> PUNTO_COMA .)


state 38

    (90) SStruct -> ESTRUCTURA AStruct .

    IDENTIFICADOR   reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    CONDICIONAL     reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    BUCLE_MIENTRAS  reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    HACER           reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    BUCLE_PARA      reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    RETORNAR        reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    ROMPER          reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_ENTERO     reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_CADENA     reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_LARGO      reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_VACIO      reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_CARACTER   reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_FLOTANTE   reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_DOUBLE     reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)
    $end            reduce using rule 90 (SStruct -> ESTRUCTURA AStruct .)


state 39

    (91) AStruct -> IDENTIFICADOR . LLAVE_IZQ BStruct LLAVE_DER CStruct

    LLAVE_IZQ       shift and go to state 74


state 40

    (92) AStruct -> LLAVE_IZQ . BStruct LLAVE_DER DStruct
    (93) BStruct -> . empty
    (94) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 75
    empty                          shift and go to state 76
    STipos                         shift and go to state 77

state 41

    (5) SInst -> SVar SInst .

    $end            reduce using rule 5 (SInst -> SVar SInst .)
    LLAVE_DER       reduce using rule 5 (SInst -> SVar SInst .)


state 42

    (6) SInst -> SIfElse SInst .

    $end            reduce using rule 6 (SInst -> SIfElse SInst .)
    LLAVE_DER       reduce using rule 6 (SInst -> SIfElse SInst .)


state 43

    (7) SInst -> SWhile SInst .

    $end            reduce using rule 7 (SInst -> SWhile SInst .)
    LLAVE_DER       reduce using rule 7 (SInst -> SWhile SInst .)


state 44

    (8) SInst -> SDoWhile SInst .

    $end            reduce using rule 8 (SInst -> SDoWhile SInst .)
    LLAVE_DER       reduce using rule 8 (SInst -> SDoWhile SInst .)


state 45

    (9) SInst -> SFor SInst .

    $end            reduce using rule 9 (SInst -> SFor SInst .)
    LLAVE_DER       reduce using rule 9 (SInst -> SFor SInst .)


state 46

    (10) SInst -> SRet SInst .

    $end            reduce using rule 10 (SInst -> SRet SInst .)
    LLAVE_DER       reduce using rule 10 (SInst -> SRet SInst .)


state 47

    (11) SInst -> SArr SInst .

    $end            reduce using rule 11 (SInst -> SArr SInst .)
    LLAVE_DER       reduce using rule 11 (SInst -> SArr SInst .)


state 48

    (12) SInst -> SBreak SInst .

    $end            reduce using rule 12 (SInst -> SBreak SInst .)
    LLAVE_DER       reduce using rule 12 (SInst -> SBreak SInst .)


state 49

    (34) SVar -> STipos IDENTIFICADOR . FVar
    (80) SArr -> STipos IDENTIFICADOR . CORCHETE_IZQ AArr
    (47) FVar -> . AVar
    (48) FVar -> . PAREN_IZQ GVar
    (36) AVar -> . ASIGNAR BVar
    (37) AVar -> . COMA IDENTIFICADOR AVar
    (38) AVar -> . PUNTO_COMA

    CORCHETE_IZQ    shift and go to state 78
    PAREN_IZQ       shift and go to state 67
    ASIGNAR         shift and go to state 68
    COMA            shift and go to state 69
    PUNTO_COMA      shift and go to state 70

    FVar                           shift and go to state 65
    AVar                           shift and go to state 66

state 50

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA

    NUMERO_ENTERO   shift and go to state 79


state 51

    (70) SIfElse -> CONDICIONAL PAREN_IZQ . SOpe PAREN_DER LLAVE_IZQ AIfElse
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 80
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 52

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ . SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 81
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 53

    (103) SDoWhile -> HACER LLAVE_IZQ . SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 82
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 54

    (104) SFor -> BUCLE_PARA PAREN_IZQ . SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (106) SDecVarFor -> . STipos IDENTIFICADOR ADecVarFor
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SDecVarFor                     shift and go to state 83
    STipos                         shift and go to state 84

state 55

    (76) SRet -> RETORNAR ARet .

    IDENTIFICADOR   reduce using rule 76 (SRet -> RETORNAR ARet .)
    CONDICIONAL     reduce using rule 76 (SRet -> RETORNAR ARet .)
    BUCLE_MIENTRAS  reduce using rule 76 (SRet -> RETORNAR ARet .)
    HACER           reduce using rule 76 (SRet -> RETORNAR ARet .)
    BUCLE_PARA      reduce using rule 76 (SRet -> RETORNAR ARet .)
    RETORNAR        reduce using rule 76 (SRet -> RETORNAR ARet .)
    ROMPER          reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_ENTERO     reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_CADENA     reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_LARGO      reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_VACIO      reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_CARACTER   reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_FLOTANTE   reduce using rule 76 (SRet -> RETORNAR ARet .)
    TIPO_DOUBLE     reduce using rule 76 (SRet -> RETORNAR ARet .)
    $end            reduce using rule 76 (SRet -> RETORNAR ARet .)
    LLAVE_DER       reduce using rule 76 (SRet -> RETORNAR ARet .)


state 56

    (77) ARet -> SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 85


state 57

    (78) ARet -> CARACTER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 86


state 58

    (14) SOpe -> AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 87
    empty                          shift and go to state 93

state 59

    (21) AOpe -> COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 94
    empty                          shift and go to state 100

state 60

    (30) COpe -> PAREN_IZQ . SOpe PAREN_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 101
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 61

    (31) COpe -> IDENTIFICADOR . DOpe
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    CORCHETE_IZQ    shift and go to state 103
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    DOpe                           shift and go to state 102
    empty                          shift and go to state 104

state 62

    (32) COpe -> NUMERO_DECIMAL .

    MULTIPLICAR     reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    DIVIDIR         reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MODULO          reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    AND_LOGICO_CONDICIONAL reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    OR_LOGICO_CONDICIONAL reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    SUMAR           reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    RESTAR          reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    COMPARAR_IGUAL  reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MAYOR_QUE       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MENOR_QUE       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    PUNTO_COMA      reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    PAREN_DER       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    COMA            reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    LLAVE_DER       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)


state 63

    (33) COpe -> NUMERO_ENTERO .

    MULTIPLICAR     reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    DIVIDIR         reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MODULO          reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    AND_LOGICO_CONDICIONAL reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    OR_LOGICO_CONDICIONAL reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    SUMAR           reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    RESTAR          reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    COMPARAR_IGUAL  reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MAYOR_QUE       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MENOR_QUE       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    PUNTO_COMA      reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    PAREN_DER       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    COMA            reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    LLAVE_DER       reduce using rule 33 (COpe -> NUMERO_ENTERO .)


state 64

    (112) SBreak -> ROMPER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    HACER           reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    RETORNAR        reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    ROMPER          reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    $end            reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 112 (SBreak -> ROMPER PUNTO_COMA .)


state 65

    (34) SVar -> STipos IDENTIFICADOR FVar .

    IDENTIFICADOR   reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    ESTRUCTURA      reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_ENTERO     reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_CADENA     reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_LARGO      reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_VACIO      reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_CARACTER   reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_FLOTANTE   reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_DOUBLE     reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    $end            reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    CONDICIONAL     reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    BUCLE_MIENTRAS  reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    HACER           reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    BUCLE_PARA      reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    RETORNAR        reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    ROMPER          reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)
    LLAVE_DER       reduce using rule 34 (SVar -> STipos IDENTIFICADOR FVar .)


state 66

    (47) FVar -> AVar .

    IDENTIFICADOR   reduce using rule 47 (FVar -> AVar .)
    ESTRUCTURA      reduce using rule 47 (FVar -> AVar .)
    TIPO_ENTERO     reduce using rule 47 (FVar -> AVar .)
    TIPO_CADENA     reduce using rule 47 (FVar -> AVar .)
    TIPO_LARGO      reduce using rule 47 (FVar -> AVar .)
    TIPO_VACIO      reduce using rule 47 (FVar -> AVar .)
    TIPO_CARACTER   reduce using rule 47 (FVar -> AVar .)
    TIPO_FLOTANTE   reduce using rule 47 (FVar -> AVar .)
    TIPO_DOUBLE     reduce using rule 47 (FVar -> AVar .)
    $end            reduce using rule 47 (FVar -> AVar .)
    CONDICIONAL     reduce using rule 47 (FVar -> AVar .)
    BUCLE_MIENTRAS  reduce using rule 47 (FVar -> AVar .)
    HACER           reduce using rule 47 (FVar -> AVar .)
    BUCLE_PARA      reduce using rule 47 (FVar -> AVar .)
    RETORNAR        reduce using rule 47 (FVar -> AVar .)
    ROMPER          reduce using rule 47 (FVar -> AVar .)
    LLAVE_DER       reduce using rule 47 (FVar -> AVar .)


state 67

    (48) FVar -> PAREN_IZQ . GVar
    (49) GVar -> . STipos HVar
    (50) GVar -> . PAREN_DER JVar
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    PAREN_DER       shift and go to state 107
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    GVar                           shift and go to state 105
    STipos                         shift and go to state 106

state 68

    (36) AVar -> ASIGNAR . BVar
    (39) BVar -> . SOpe CVar
    (40) BVar -> . IDENTIFICADOR SFunc AVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    IDENTIFICADOR   shift and go to state 110
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BVar                           shift and go to state 108
    SOpe                           shift and go to state 109
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 69

    (37) AVar -> COMA . IDENTIFICADOR AVar

    IDENTIFICADOR   shift and go to state 111


state 70

    (38) AVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 38 (AVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 38 (AVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 38 (AVar -> PUNTO_COMA .)
    $end            reduce using rule 38 (AVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 38 (AVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 38 (AVar -> PUNTO_COMA .)
    HACER           reduce using rule 38 (AVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 38 (AVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 38 (AVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 38 (AVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 38 (AVar -> PUNTO_COMA .)


state 71

    (43) DVar -> ASIGNAR EVar .

    IDENTIFICADOR   reduce using rule 43 (DVar -> ASIGNAR EVar .)
    ESTRUCTURA      reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_ENTERO     reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_CADENA     reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_LARGO      reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_VACIO      reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_CARACTER   reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_FLOTANTE   reduce using rule 43 (DVar -> ASIGNAR EVar .)
    TIPO_DOUBLE     reduce using rule 43 (DVar -> ASIGNAR EVar .)
    $end            reduce using rule 43 (DVar -> ASIGNAR EVar .)
    CONDICIONAL     reduce using rule 43 (DVar -> ASIGNAR EVar .)
    BUCLE_MIENTRAS  reduce using rule 43 (DVar -> ASIGNAR EVar .)
    HACER           reduce using rule 43 (DVar -> ASIGNAR EVar .)
    BUCLE_PARA      reduce using rule 43 (DVar -> ASIGNAR EVar .)
    RETORNAR        reduce using rule 43 (DVar -> ASIGNAR EVar .)
    ROMPER          reduce using rule 43 (DVar -> ASIGNAR EVar .)
    LLAVE_DER       reduce using rule 43 (DVar -> ASIGNAR EVar .)


state 72

    (45) EVar -> SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 112


state 73

    (46) EVar -> IDENTIFICADOR . SFunc DVar
    (31) COpe -> IDENTIFICADOR . DOpe
    (64) SFunc -> . PAREN_IZQ AFunc
    (65) SFunc -> . empty
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    PAREN_IZQ       shift and go to state 114
    CORCHETE_IZQ    shift and go to state 103
    ASIGNAR         reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)

    SFunc                          shift and go to state 113
    DOpe                           shift and go to state 102
    empty                          shift and go to state 115

state 74

    (91) AStruct -> IDENTIFICADOR LLAVE_IZQ . BStruct LLAVE_DER CStruct
    (93) BStruct -> . empty
    (94) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 116
    empty                          shift and go to state 76
    STipos                         shift and go to state 77

state 75

    (92) AStruct -> LLAVE_IZQ BStruct . LLAVE_DER DStruct

    LLAVE_DER       shift and go to state 117


state 76

    (93) BStruct -> empty .

    LLAVE_DER       reduce using rule 93 (BStruct -> empty .)


state 77

    (94) BStruct -> STipos . IDENTIFICADOR FStruct

    IDENTIFICADOR   shift and go to state 118


state 78

    (80) SArr -> STipos IDENTIFICADOR CORCHETE_IZQ . AArr
    (81) AArr -> . NUMERO_ENTERO CORCHETE_DER BArr
    (82) AArr -> . CORCHETE_DER CArr

    NUMERO_ENTERO   shift and go to state 120
    CORCHETE_DER    shift and go to state 121

    AArr                           shift and go to state 119

state 79

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER ASIGNAR SOpe PUNTO_COMA

    CORCHETE_DER    shift and go to state 122


state 80

    (70) SIfElse -> CONDICIONAL PAREN_IZQ SOpe . PAREN_DER LLAVE_IZQ AIfElse

    PAREN_DER       shift and go to state 123


state 81

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe . PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_DER       shift and go to state 124


state 82

    (103) SDoWhile -> HACER LLAVE_IZQ SInst . LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    LLAVE_DER       shift and go to state 125


state 83

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor . PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 126


state 84

    (106) SDecVarFor -> STipos . IDENTIFICADOR ADecVarFor

    IDENTIFICADOR   shift and go to state 127


state 85

    (77) ARet -> SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    HACER           reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    $end            reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 77 (ARet -> SOpe PUNTO_COMA .)


state 86

    (78) ARet -> CARACTER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    HACER           reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    RETORNAR        reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    ROMPER          reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    $end            reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 78 (ARet -> CARACTER PUNTO_COMA .)


state 87

    (14) SOpe -> AOpe ZOpe .

    PUNTO_COMA      reduce using rule 14 (SOpe -> AOpe ZOpe .)
    PAREN_DER       reduce using rule 14 (SOpe -> AOpe ZOpe .)
    COMA            reduce using rule 14 (SOpe -> AOpe ZOpe .)
    LLAVE_DER       reduce using rule 14 (SOpe -> AOpe ZOpe .)


state 88

    (15) ZOpe -> SUMAR . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    AOpe                           shift and go to state 128
    COpe                           shift and go to state 59

state 89

    (16) ZOpe -> RESTAR . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    AOpe                           shift and go to state 129
    COpe                           shift and go to state 59

state 90

    (17) ZOpe -> COMPARAR_IGUAL . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    AOpe                           shift and go to state 130
    COpe                           shift and go to state 59

state 91

    (18) ZOpe -> MAYOR_QUE . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    AOpe                           shift and go to state 131
    COpe                           shift and go to state 59

state 92

    (19) ZOpe -> MENOR_QUE . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    AOpe                           shift and go to state 132
    COpe                           shift and go to state 59

state 93

    (20) ZOpe -> empty .

    PUNTO_COMA      reduce using rule 20 (ZOpe -> empty .)
    PAREN_DER       reduce using rule 20 (ZOpe -> empty .)
    COMA            reduce using rule 20 (ZOpe -> empty .)
    LLAVE_DER       reduce using rule 20 (ZOpe -> empty .)


state 94

    (21) AOpe -> COpe BOpe .

    SUMAR           reduce using rule 21 (AOpe -> COpe BOpe .)
    RESTAR          reduce using rule 21 (AOpe -> COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 21 (AOpe -> COpe BOpe .)
    MAYOR_QUE       reduce using rule 21 (AOpe -> COpe BOpe .)
    MENOR_QUE       reduce using rule 21 (AOpe -> COpe BOpe .)
    PUNTO_COMA      reduce using rule 21 (AOpe -> COpe BOpe .)
    PAREN_DER       reduce using rule 21 (AOpe -> COpe BOpe .)
    COMA            reduce using rule 21 (AOpe -> COpe BOpe .)
    LLAVE_DER       reduce using rule 21 (AOpe -> COpe BOpe .)


state 95

    (22) BOpe -> MULTIPLICAR . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    COpe                           shift and go to state 133

state 96

    (23) BOpe -> DIVIDIR . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    COpe                           shift and go to state 134

state 97

    (24) BOpe -> MODULO . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    COpe                           shift and go to state 135

state 98

    (25) BOpe -> AND_LOGICO_CONDICIONAL . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    COpe                           shift and go to state 136

state 99

    (26) BOpe -> OR_LOGICO_CONDICIONAL . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    COpe                           shift and go to state 137

state 100

    (27) BOpe -> empty .

    SUMAR           reduce using rule 27 (BOpe -> empty .)
    RESTAR          reduce using rule 27 (BOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 27 (BOpe -> empty .)
    MAYOR_QUE       reduce using rule 27 (BOpe -> empty .)
    MENOR_QUE       reduce using rule 27 (BOpe -> empty .)
    PUNTO_COMA      reduce using rule 27 (BOpe -> empty .)
    PAREN_DER       reduce using rule 27 (BOpe -> empty .)
    COMA            reduce using rule 27 (BOpe -> empty .)
    LLAVE_DER       reduce using rule 27 (BOpe -> empty .)


state 101

    (30) COpe -> PAREN_IZQ SOpe . PAREN_DER

    PAREN_DER       shift and go to state 138


state 102

    (31) COpe -> IDENTIFICADOR DOpe .

    MULTIPLICAR     reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    DIVIDIR         reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    MODULO          reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    SUMAR           reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    RESTAR          reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    COMPARAR_IGUAL  reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    MAYOR_QUE       reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    MENOR_QUE       reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    PUNTO_COMA      reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    PAREN_DER       reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    COMA            reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)
    LLAVE_DER       reduce using rule 31 (COpe -> IDENTIFICADOR DOpe .)


state 103

    (28) DOpe -> CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER

    NUMERO_ENTERO   shift and go to state 139


state 104

    (29) DOpe -> empty .

    MULTIPLICAR     reduce using rule 29 (DOpe -> empty .)
    DIVIDIR         reduce using rule 29 (DOpe -> empty .)
    MODULO          reduce using rule 29 (DOpe -> empty .)
    AND_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    OR_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    SUMAR           reduce using rule 29 (DOpe -> empty .)
    RESTAR          reduce using rule 29 (DOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 29 (DOpe -> empty .)
    MAYOR_QUE       reduce using rule 29 (DOpe -> empty .)
    MENOR_QUE       reduce using rule 29 (DOpe -> empty .)
    PUNTO_COMA      reduce using rule 29 (DOpe -> empty .)
    PAREN_DER       reduce using rule 29 (DOpe -> empty .)
    COMA            reduce using rule 29 (DOpe -> empty .)
    LLAVE_DER       reduce using rule 29 (DOpe -> empty .)


state 105

    (48) FVar -> PAREN_IZQ GVar .

    IDENTIFICADOR   reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    ESTRUCTURA      reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_ENTERO     reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_CADENA     reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_LARGO      reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_VACIO      reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_CARACTER   reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_FLOTANTE   reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    TIPO_DOUBLE     reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    $end            reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    CONDICIONAL     reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    BUCLE_MIENTRAS  reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    HACER           reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    BUCLE_PARA      reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    RETORNAR        reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    ROMPER          reduce using rule 48 (FVar -> PAREN_IZQ GVar .)
    LLAVE_DER       reduce using rule 48 (FVar -> PAREN_IZQ GVar .)


state 106

    (49) GVar -> STipos . HVar
    (51) HVar -> . IDENTIFICADOR IVar
    (52) HVar -> . IVar
    (53) IVar -> . COMA GVar
    (54) IVar -> . PAREN_DER JVar

    IDENTIFICADOR   shift and go to state 141
    COMA            shift and go to state 143
    PAREN_DER       shift and go to state 144

    HVar                           shift and go to state 140
    IVar                           shift and go to state 142

state 107

    (50) GVar -> PAREN_DER . JVar
    (55) JVar -> . PUNTO_COMA
    (56) JVar -> . LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 146
    LLAVE_IZQ       shift and go to state 147

    JVar                           shift and go to state 145

state 108

    (36) AVar -> ASIGNAR BVar .

    IDENTIFICADOR   reduce using rule 36 (AVar -> ASIGNAR BVar .)
    ESTRUCTURA      reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_ENTERO     reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_CADENA     reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_LARGO      reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_VACIO      reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_CARACTER   reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_FLOTANTE   reduce using rule 36 (AVar -> ASIGNAR BVar .)
    TIPO_DOUBLE     reduce using rule 36 (AVar -> ASIGNAR BVar .)
    $end            reduce using rule 36 (AVar -> ASIGNAR BVar .)
    CONDICIONAL     reduce using rule 36 (AVar -> ASIGNAR BVar .)
    BUCLE_MIENTRAS  reduce using rule 36 (AVar -> ASIGNAR BVar .)
    HACER           reduce using rule 36 (AVar -> ASIGNAR BVar .)
    BUCLE_PARA      reduce using rule 36 (AVar -> ASIGNAR BVar .)
    RETORNAR        reduce using rule 36 (AVar -> ASIGNAR BVar .)
    ROMPER          reduce using rule 36 (AVar -> ASIGNAR BVar .)
    LLAVE_DER       reduce using rule 36 (AVar -> ASIGNAR BVar .)


state 109

    (39) BVar -> SOpe . CVar
    (41) CVar -> . PUNTO_COMA
    (42) CVar -> . COMA BVar

    PUNTO_COMA      shift and go to state 149
    COMA            shift and go to state 150

    CVar                           shift and go to state 148

state 110

    (40) BVar -> IDENTIFICADOR . SFunc AVar
    (31) COpe -> IDENTIFICADOR . DOpe
    (64) SFunc -> . PAREN_IZQ AFunc
    (65) SFunc -> . empty
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    PAREN_IZQ       shift and go to state 114
    CORCHETE_IZQ    shift and go to state 103
    ASIGNAR         reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)

    SFunc                          shift and go to state 151
    DOpe                           shift and go to state 102
    empty                          shift and go to state 115

state 111

    (37) AVar -> COMA IDENTIFICADOR . AVar
    (36) AVar -> . ASIGNAR BVar
    (37) AVar -> . COMA IDENTIFICADOR AVar
    (38) AVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 68
    COMA            shift and go to state 69
    PUNTO_COMA      shift and go to state 70

    AVar                           shift and go to state 152

state 112

    (45) EVar -> SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    $end            reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    HACER           reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 45 (EVar -> SOpe PUNTO_COMA .)


state 113

    (46) EVar -> IDENTIFICADOR SFunc . DVar
    (43) DVar -> . ASIGNAR EVar
    (44) DVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 153

state 114

    (64) SFunc -> PAREN_IZQ . AFunc
    (66) AFunc -> . PAREN_DER
    (67) AFunc -> . IDENTIFICADOR BFunc

    PAREN_DER       shift and go to state 155
    IDENTIFICADOR   shift and go to state 156

    AFunc                          shift and go to state 154

state 115

    (65) SFunc -> empty .
    (29) DOpe -> empty .

  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 29 (DOpe -> empty .)
  ! reduce/reduce conflict for COMA resolved using rule 29 (DOpe -> empty .)
    ASIGNAR         reduce using rule 65 (SFunc -> empty .)
    MULTIPLICAR     reduce using rule 29 (DOpe -> empty .)
    DIVIDIR         reduce using rule 29 (DOpe -> empty .)
    MODULO          reduce using rule 29 (DOpe -> empty .)
    AND_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    OR_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    SUMAR           reduce using rule 29 (DOpe -> empty .)
    RESTAR          reduce using rule 29 (DOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 29 (DOpe -> empty .)
    MAYOR_QUE       reduce using rule 29 (DOpe -> empty .)
    MENOR_QUE       reduce using rule 29 (DOpe -> empty .)
    PUNTO_COMA      reduce using rule 29 (DOpe -> empty .)
    COMA            reduce using rule 29 (DOpe -> empty .)

  ! PUNTO_COMA      [ reduce using rule 65 (SFunc -> empty .) ]
  ! COMA            [ reduce using rule 65 (SFunc -> empty .) ]


state 116

    (91) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct . LLAVE_DER CStruct

    LLAVE_DER       shift and go to state 157


state 117

    (92) AStruct -> LLAVE_IZQ BStruct LLAVE_DER . DStruct
    (97) DStruct -> . IDENTIFICADOR EStruct

    IDENTIFICADOR   shift and go to state 159

    DStruct                        shift and go to state 158

state 118

    (94) BStruct -> STipos IDENTIFICADOR . FStruct
    (100) FStruct -> . PUNTO_COMA BStruct
    (101) FStruct -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct

    PUNTO_COMA      shift and go to state 161
    CORCHETE_IZQ    shift and go to state 162

    FStruct                        shift and go to state 160

state 119

    (80) SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .

    IDENTIFICADOR   reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    CONDICIONAL     reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    BUCLE_MIENTRAS  reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    HACER           reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    BUCLE_PARA      reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    RETORNAR        reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    ROMPER          reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_ENTERO     reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_CADENA     reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_LARGO      reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_VACIO      reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_CARACTER   reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_FLOTANTE   reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_DOUBLE     reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    $end            reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    LLAVE_DER       reduce using rule 80 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)


state 120

    (81) AArr -> NUMERO_ENTERO . CORCHETE_DER BArr

    CORCHETE_DER    shift and go to state 163


state 121

    (82) AArr -> CORCHETE_DER . CArr
    (85) CArr -> . ASIGNAR LLAVE_IZQ DArr

    ASIGNAR         shift and go to state 165

    CArr                           shift and go to state 164

state 122

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER . ASIGNAR SOpe PUNTO_COMA

    ASIGNAR         shift and go to state 166


state 123

    (70) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER . LLAVE_IZQ AIfElse

    LLAVE_IZQ       shift and go to state 167


state 124

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER . LLAVE_IZQ SInst LLAVE_DER

    LLAVE_IZQ       shift and go to state 168


state 125

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    BUCLE_MIENTRAS  shift and go to state 169


state 126

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA . SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 170
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 127

    (106) SDecVarFor -> STipos IDENTIFICADOR . ADecVarFor
    (107) ADecVarFor -> . ASIGNAR BDecVarFor
    (108) ADecVarFor -> . COMA BDecVarFor

    ASIGNAR         shift and go to state 172
    COMA            shift and go to state 173

    ADecVarFor                     shift and go to state 171

state 128

    (15) ZOpe -> SUMAR AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 174
    empty                          shift and go to state 93

state 129

    (16) ZOpe -> RESTAR AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 175
    empty                          shift and go to state 93

state 130

    (17) ZOpe -> COMPARAR_IGUAL AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 176
    empty                          shift and go to state 93

state 131

    (18) ZOpe -> MAYOR_QUE AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 177
    empty                          shift and go to state 93

state 132

    (19) ZOpe -> MENOR_QUE AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 88
    RESTAR          shift and go to state 89
    COMPARAR_IGUAL  shift and go to state 90
    MAYOR_QUE       shift and go to state 91
    MENOR_QUE       shift and go to state 92
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 178
    empty                          shift and go to state 93

state 133

    (22) BOpe -> MULTIPLICAR COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 179
    empty                          shift and go to state 100

state 134

    (23) BOpe -> DIVIDIR COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 180
    empty                          shift and go to state 100

state 135

    (24) BOpe -> MODULO COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 181
    empty                          shift and go to state 100

state 136

    (25) BOpe -> AND_LOGICO_CONDICIONAL COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 182
    empty                          shift and go to state 100

state 137

    (26) BOpe -> OR_LOGICO_CONDICIONAL COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 95
    DIVIDIR         shift and go to state 96
    MODULO          shift and go to state 97
    AND_LOGICO_CONDICIONAL shift and go to state 98
    OR_LOGICO_CONDICIONAL shift and go to state 99
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 183
    empty                          shift and go to state 100

state 138

    (30) COpe -> PAREN_IZQ SOpe PAREN_DER .

    MULTIPLICAR     reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    DIVIDIR         reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MODULO          reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    AND_LOGICO_CONDICIONAL reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    OR_LOGICO_CONDICIONAL reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    SUMAR           reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    RESTAR          reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    COMPARAR_IGUAL  reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MAYOR_QUE       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MENOR_QUE       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    PUNTO_COMA      reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    PAREN_DER       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    COMA            reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    LLAVE_DER       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)


state 139

    (28) DOpe -> CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER

    CORCHETE_DER    shift and go to state 184


state 140

    (49) GVar -> STipos HVar .

    IDENTIFICADOR   reduce using rule 49 (GVar -> STipos HVar .)
    ESTRUCTURA      reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_ENTERO     reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_CADENA     reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_LARGO      reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_VACIO      reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_CARACTER   reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_FLOTANTE   reduce using rule 49 (GVar -> STipos HVar .)
    TIPO_DOUBLE     reduce using rule 49 (GVar -> STipos HVar .)
    $end            reduce using rule 49 (GVar -> STipos HVar .)
    CONDICIONAL     reduce using rule 49 (GVar -> STipos HVar .)
    BUCLE_MIENTRAS  reduce using rule 49 (GVar -> STipos HVar .)
    HACER           reduce using rule 49 (GVar -> STipos HVar .)
    BUCLE_PARA      reduce using rule 49 (GVar -> STipos HVar .)
    RETORNAR        reduce using rule 49 (GVar -> STipos HVar .)
    ROMPER          reduce using rule 49 (GVar -> STipos HVar .)
    LLAVE_DER       reduce using rule 49 (GVar -> STipos HVar .)


state 141

    (51) HVar -> IDENTIFICADOR . IVar
    (53) IVar -> . COMA GVar
    (54) IVar -> . PAREN_DER JVar

    COMA            shift and go to state 143
    PAREN_DER       shift and go to state 144

    IVar                           shift and go to state 185

state 142

    (52) HVar -> IVar .

    IDENTIFICADOR   reduce using rule 52 (HVar -> IVar .)
    ESTRUCTURA      reduce using rule 52 (HVar -> IVar .)
    TIPO_ENTERO     reduce using rule 52 (HVar -> IVar .)
    TIPO_CADENA     reduce using rule 52 (HVar -> IVar .)
    TIPO_LARGO      reduce using rule 52 (HVar -> IVar .)
    TIPO_VACIO      reduce using rule 52 (HVar -> IVar .)
    TIPO_CARACTER   reduce using rule 52 (HVar -> IVar .)
    TIPO_FLOTANTE   reduce using rule 52 (HVar -> IVar .)
    TIPO_DOUBLE     reduce using rule 52 (HVar -> IVar .)
    $end            reduce using rule 52 (HVar -> IVar .)
    CONDICIONAL     reduce using rule 52 (HVar -> IVar .)
    BUCLE_MIENTRAS  reduce using rule 52 (HVar -> IVar .)
    HACER           reduce using rule 52 (HVar -> IVar .)
    BUCLE_PARA      reduce using rule 52 (HVar -> IVar .)
    RETORNAR        reduce using rule 52 (HVar -> IVar .)
    ROMPER          reduce using rule 52 (HVar -> IVar .)
    LLAVE_DER       reduce using rule 52 (HVar -> IVar .)


state 143

    (53) IVar -> COMA . GVar
    (49) GVar -> . STipos HVar
    (50) GVar -> . PAREN_DER JVar
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    PAREN_DER       shift and go to state 107
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    GVar                           shift and go to state 186
    STipos                         shift and go to state 106

state 144

    (54) IVar -> PAREN_DER . JVar
    (55) JVar -> . PUNTO_COMA
    (56) JVar -> . LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 146
    LLAVE_IZQ       shift and go to state 147

    JVar                           shift and go to state 187

state 145

    (50) GVar -> PAREN_DER JVar .

    IDENTIFICADOR   reduce using rule 50 (GVar -> PAREN_DER JVar .)
    ESTRUCTURA      reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_ENTERO     reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_CADENA     reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_LARGO      reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_VACIO      reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_CARACTER   reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_FLOTANTE   reduce using rule 50 (GVar -> PAREN_DER JVar .)
    TIPO_DOUBLE     reduce using rule 50 (GVar -> PAREN_DER JVar .)
    $end            reduce using rule 50 (GVar -> PAREN_DER JVar .)
    CONDICIONAL     reduce using rule 50 (GVar -> PAREN_DER JVar .)
    BUCLE_MIENTRAS  reduce using rule 50 (GVar -> PAREN_DER JVar .)
    HACER           reduce using rule 50 (GVar -> PAREN_DER JVar .)
    BUCLE_PARA      reduce using rule 50 (GVar -> PAREN_DER JVar .)
    RETORNAR        reduce using rule 50 (GVar -> PAREN_DER JVar .)
    ROMPER          reduce using rule 50 (GVar -> PAREN_DER JVar .)
    LLAVE_DER       reduce using rule 50 (GVar -> PAREN_DER JVar .)


state 146

    (55) JVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 55 (JVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 55 (JVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 55 (JVar -> PUNTO_COMA .)
    $end            reduce using rule 55 (JVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 55 (JVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 55 (JVar -> PUNTO_COMA .)
    HACER           reduce using rule 55 (JVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 55 (JVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 55 (JVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 55 (JVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 55 (JVar -> PUNTO_COMA .)


state 147

    (56) JVar -> LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 188
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 148

    (39) BVar -> SOpe CVar .

    IDENTIFICADOR   reduce using rule 39 (BVar -> SOpe CVar .)
    ESTRUCTURA      reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_ENTERO     reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_CADENA     reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_LARGO      reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_VACIO      reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_CARACTER   reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_FLOTANTE   reduce using rule 39 (BVar -> SOpe CVar .)
    TIPO_DOUBLE     reduce using rule 39 (BVar -> SOpe CVar .)
    $end            reduce using rule 39 (BVar -> SOpe CVar .)
    CONDICIONAL     reduce using rule 39 (BVar -> SOpe CVar .)
    BUCLE_MIENTRAS  reduce using rule 39 (BVar -> SOpe CVar .)
    HACER           reduce using rule 39 (BVar -> SOpe CVar .)
    BUCLE_PARA      reduce using rule 39 (BVar -> SOpe CVar .)
    RETORNAR        reduce using rule 39 (BVar -> SOpe CVar .)
    ROMPER          reduce using rule 39 (BVar -> SOpe CVar .)
    LLAVE_DER       reduce using rule 39 (BVar -> SOpe CVar .)


state 149

    (41) CVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 41 (CVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 41 (CVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 41 (CVar -> PUNTO_COMA .)
    $end            reduce using rule 41 (CVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 41 (CVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 41 (CVar -> PUNTO_COMA .)
    HACER           reduce using rule 41 (CVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 41 (CVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 41 (CVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 41 (CVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 41 (CVar -> PUNTO_COMA .)


state 150

    (42) CVar -> COMA . BVar
    (39) BVar -> . SOpe CVar
    (40) BVar -> . IDENTIFICADOR SFunc AVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    IDENTIFICADOR   shift and go to state 110
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BVar                           shift and go to state 189
    SOpe                           shift and go to state 109
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 151

    (40) BVar -> IDENTIFICADOR SFunc . AVar
    (36) AVar -> . ASIGNAR BVar
    (37) AVar -> . COMA IDENTIFICADOR AVar
    (38) AVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 68
    COMA            shift and go to state 69
    PUNTO_COMA      shift and go to state 70

    AVar                           shift and go to state 190

state 152

    (37) AVar -> COMA IDENTIFICADOR AVar .

    IDENTIFICADOR   reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    ESTRUCTURA      reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_ENTERO     reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_CADENA     reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_LARGO      reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_VACIO      reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_CARACTER   reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_FLOTANTE   reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_DOUBLE     reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    $end            reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    CONDICIONAL     reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    BUCLE_MIENTRAS  reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    HACER           reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    BUCLE_PARA      reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    RETORNAR        reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    ROMPER          reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)
    LLAVE_DER       reduce using rule 37 (AVar -> COMA IDENTIFICADOR AVar .)


state 153

    (46) EVar -> IDENTIFICADOR SFunc DVar .

    IDENTIFICADOR   reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    ESTRUCTURA      reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_ENTERO     reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_CADENA     reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_LARGO      reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_VACIO      reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_CARACTER   reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_FLOTANTE   reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_DOUBLE     reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    $end            reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    CONDICIONAL     reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    BUCLE_MIENTRAS  reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    HACER           reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    BUCLE_PARA      reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    RETORNAR        reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    ROMPER          reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)
    LLAVE_DER       reduce using rule 46 (EVar -> IDENTIFICADOR SFunc DVar .)


state 154

    (64) SFunc -> PAREN_IZQ AFunc .

    ASIGNAR         reduce using rule 64 (SFunc -> PAREN_IZQ AFunc .)
    PUNTO_COMA      reduce using rule 64 (SFunc -> PAREN_IZQ AFunc .)
    COMA            reduce using rule 64 (SFunc -> PAREN_IZQ AFunc .)


state 155

    (66) AFunc -> PAREN_DER .

    ASIGNAR         reduce using rule 66 (AFunc -> PAREN_DER .)
    PUNTO_COMA      reduce using rule 66 (AFunc -> PAREN_DER .)
    COMA            reduce using rule 66 (AFunc -> PAREN_DER .)


state 156

    (67) AFunc -> IDENTIFICADOR . BFunc
    (68) BFunc -> . COMA IDENTIFICADOR BFunc
    (69) BFunc -> . PAREN_DER

    COMA            shift and go to state 192
    PAREN_DER       shift and go to state 193

    BFunc                          shift and go to state 191

state 157

    (91) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER . CStruct
    (95) CStruct -> . PUNTO_COMA
    (96) CStruct -> . DStruct
    (97) DStruct -> . IDENTIFICADOR EStruct

    PUNTO_COMA      shift and go to state 195
    IDENTIFICADOR   shift and go to state 159

    CStruct                        shift and go to state 194
    DStruct                        shift and go to state 196

state 158

    (92) AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .

    IDENTIFICADOR   reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    CONDICIONAL     reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    BUCLE_MIENTRAS  reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    HACER           reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    BUCLE_PARA      reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    RETORNAR        reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    ROMPER          reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_ENTERO     reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_CADENA     reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_LARGO      reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_VACIO      reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_CARACTER   reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_FLOTANTE   reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_DOUBLE     reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    $end            reduce using rule 92 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)


state 159

    (97) DStruct -> IDENTIFICADOR . EStruct
    (98) EStruct -> . COMA DStruct
    (99) EStruct -> . PUNTO_COMA

    COMA            shift and go to state 198
    PUNTO_COMA      shift and go to state 199

    EStruct                        shift and go to state 197

state 160

    (94) BStruct -> STipos IDENTIFICADOR FStruct .

    LLAVE_DER       reduce using rule 94 (BStruct -> STipos IDENTIFICADOR FStruct .)


state 161

    (100) FStruct -> PUNTO_COMA . BStruct
    (93) BStruct -> . empty
    (94) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 200
    empty                          shift and go to state 76
    STipos                         shift and go to state 77

state 162

    (101) FStruct -> CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct

    NUMERO_ENTERO   shift and go to state 201


state 163

    (81) AArr -> NUMERO_ENTERO CORCHETE_DER . BArr
    (83) BArr -> . CArr
    (84) BArr -> . PUNTO_COMA
    (85) CArr -> . ASIGNAR LLAVE_IZQ DArr

    PUNTO_COMA      shift and go to state 204
    ASIGNAR         shift and go to state 165

    BArr                           shift and go to state 202
    CArr                           shift and go to state 203

state 164

    (82) AArr -> CORCHETE_DER CArr .

    IDENTIFICADOR   reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    CONDICIONAL     reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    BUCLE_MIENTRAS  reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    HACER           reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    BUCLE_PARA      reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    RETORNAR        reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    ROMPER          reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_ENTERO     reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_CADENA     reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_LARGO      reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_VACIO      reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_CARACTER   reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_FLOTANTE   reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    TIPO_DOUBLE     reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    $end            reduce using rule 82 (AArr -> CORCHETE_DER CArr .)
    LLAVE_DER       reduce using rule 82 (AArr -> CORCHETE_DER CArr .)


state 165

    (85) CArr -> ASIGNAR . LLAVE_IZQ DArr

    LLAVE_IZQ       shift and go to state 205


state 166

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR . SOpe PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 206
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 167

    (70) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ . AIfElse
    (71) AIfElse -> . SInst LLAVE_DER BIfElse
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    AIfElse                        shift and go to state 207
    SInst                          shift and go to state 208
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 168

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 209
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 169

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS . PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 210


state 170

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe . PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 211


state 171

    (106) SDecVarFor -> STipos IDENTIFICADOR ADecVarFor .

    PUNTO_COMA      reduce using rule 106 (SDecVarFor -> STipos IDENTIFICADOR ADecVarFor .)


state 172

    (107) ADecVarFor -> ASIGNAR . BDecVarFor
    (109) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BDecVarFor                     shift and go to state 212
    SOpe                           shift and go to state 213
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 173

    (108) ADecVarFor -> COMA . BDecVarFor
    (109) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BDecVarFor                     shift and go to state 214
    SOpe                           shift and go to state 213
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 174

    (15) ZOpe -> SUMAR AOpe ZOpe .

    PUNTO_COMA      reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    PAREN_DER       reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    COMA            reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    LLAVE_DER       reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)


state 175

    (16) ZOpe -> RESTAR AOpe ZOpe .

    PUNTO_COMA      reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    PAREN_DER       reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    COMA            reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    LLAVE_DER       reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)


state 176

    (17) ZOpe -> COMPARAR_IGUAL AOpe ZOpe .

    PUNTO_COMA      reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    PAREN_DER       reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    COMA            reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    LLAVE_DER       reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)


state 177

    (18) ZOpe -> MAYOR_QUE AOpe ZOpe .

    PUNTO_COMA      reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    PAREN_DER       reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    COMA            reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    LLAVE_DER       reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)


state 178

    (19) ZOpe -> MENOR_QUE AOpe ZOpe .

    PUNTO_COMA      reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    PAREN_DER       reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    COMA            reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    LLAVE_DER       reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)


state 179

    (22) BOpe -> MULTIPLICAR COpe BOpe .

    SUMAR           reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    RESTAR          reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    MAYOR_QUE       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    MENOR_QUE       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    PUNTO_COMA      reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    PAREN_DER       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    COMA            reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    LLAVE_DER       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)


state 180

    (23) BOpe -> DIVIDIR COpe BOpe .

    SUMAR           reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    RESTAR          reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    MAYOR_QUE       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    MENOR_QUE       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    PUNTO_COMA      reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    PAREN_DER       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    COMA            reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    LLAVE_DER       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)


state 181

    (24) BOpe -> MODULO COpe BOpe .

    SUMAR           reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    RESTAR          reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    MAYOR_QUE       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    MENOR_QUE       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    PUNTO_COMA      reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    PAREN_DER       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    COMA            reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    LLAVE_DER       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)


state 182

    (25) BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .

    SUMAR           reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    RESTAR          reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    MAYOR_QUE       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    MENOR_QUE       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    PUNTO_COMA      reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    PAREN_DER       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    COMA            reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    LLAVE_DER       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)


state 183

    (26) BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .

    SUMAR           reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    RESTAR          reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    MAYOR_QUE       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    MENOR_QUE       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    PUNTO_COMA      reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    PAREN_DER       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    COMA            reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    LLAVE_DER       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)


state 184

    (28) DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .

    MULTIPLICAR     reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    DIVIDIR         reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MODULO          reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    AND_LOGICO_CONDICIONAL reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    OR_LOGICO_CONDICIONAL reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    SUMAR           reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    RESTAR          reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    COMPARAR_IGUAL  reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MAYOR_QUE       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MENOR_QUE       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    PUNTO_COMA      reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    PAREN_DER       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    COMA            reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    LLAVE_DER       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)


state 185

    (51) HVar -> IDENTIFICADOR IVar .

    IDENTIFICADOR   reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    ESTRUCTURA      reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_ENTERO     reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_CADENA     reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_LARGO      reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_VACIO      reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_CARACTER   reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_FLOTANTE   reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    TIPO_DOUBLE     reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    $end            reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    CONDICIONAL     reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    BUCLE_MIENTRAS  reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    HACER           reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    BUCLE_PARA      reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    RETORNAR        reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    ROMPER          reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)
    LLAVE_DER       reduce using rule 51 (HVar -> IDENTIFICADOR IVar .)


state 186

    (53) IVar -> COMA GVar .

    IDENTIFICADOR   reduce using rule 53 (IVar -> COMA GVar .)
    ESTRUCTURA      reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_ENTERO     reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_CADENA     reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_LARGO      reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_VACIO      reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_CARACTER   reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_FLOTANTE   reduce using rule 53 (IVar -> COMA GVar .)
    TIPO_DOUBLE     reduce using rule 53 (IVar -> COMA GVar .)
    $end            reduce using rule 53 (IVar -> COMA GVar .)
    CONDICIONAL     reduce using rule 53 (IVar -> COMA GVar .)
    BUCLE_MIENTRAS  reduce using rule 53 (IVar -> COMA GVar .)
    HACER           reduce using rule 53 (IVar -> COMA GVar .)
    BUCLE_PARA      reduce using rule 53 (IVar -> COMA GVar .)
    RETORNAR        reduce using rule 53 (IVar -> COMA GVar .)
    ROMPER          reduce using rule 53 (IVar -> COMA GVar .)
    LLAVE_DER       reduce using rule 53 (IVar -> COMA GVar .)


state 187

    (54) IVar -> PAREN_DER JVar .

    IDENTIFICADOR   reduce using rule 54 (IVar -> PAREN_DER JVar .)
    ESTRUCTURA      reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_ENTERO     reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_CADENA     reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_LARGO      reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_VACIO      reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_CARACTER   reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_FLOTANTE   reduce using rule 54 (IVar -> PAREN_DER JVar .)
    TIPO_DOUBLE     reduce using rule 54 (IVar -> PAREN_DER JVar .)
    $end            reduce using rule 54 (IVar -> PAREN_DER JVar .)
    CONDICIONAL     reduce using rule 54 (IVar -> PAREN_DER JVar .)
    BUCLE_MIENTRAS  reduce using rule 54 (IVar -> PAREN_DER JVar .)
    HACER           reduce using rule 54 (IVar -> PAREN_DER JVar .)
    BUCLE_PARA      reduce using rule 54 (IVar -> PAREN_DER JVar .)
    RETORNAR        reduce using rule 54 (IVar -> PAREN_DER JVar .)
    ROMPER          reduce using rule 54 (IVar -> PAREN_DER JVar .)
    LLAVE_DER       reduce using rule 54 (IVar -> PAREN_DER JVar .)


state 188

    (56) JVar -> LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 215


state 189

    (42) CVar -> COMA BVar .

    IDENTIFICADOR   reduce using rule 42 (CVar -> COMA BVar .)
    ESTRUCTURA      reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_ENTERO     reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_CADENA     reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_LARGO      reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_VACIO      reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_CARACTER   reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_FLOTANTE   reduce using rule 42 (CVar -> COMA BVar .)
    TIPO_DOUBLE     reduce using rule 42 (CVar -> COMA BVar .)
    $end            reduce using rule 42 (CVar -> COMA BVar .)
    CONDICIONAL     reduce using rule 42 (CVar -> COMA BVar .)
    BUCLE_MIENTRAS  reduce using rule 42 (CVar -> COMA BVar .)
    HACER           reduce using rule 42 (CVar -> COMA BVar .)
    BUCLE_PARA      reduce using rule 42 (CVar -> COMA BVar .)
    RETORNAR        reduce using rule 42 (CVar -> COMA BVar .)
    ROMPER          reduce using rule 42 (CVar -> COMA BVar .)
    LLAVE_DER       reduce using rule 42 (CVar -> COMA BVar .)


state 190

    (40) BVar -> IDENTIFICADOR SFunc AVar .

    IDENTIFICADOR   reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    ESTRUCTURA      reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_ENTERO     reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_CADENA     reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_LARGO      reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_VACIO      reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_CARACTER   reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_FLOTANTE   reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_DOUBLE     reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    $end            reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    CONDICIONAL     reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    BUCLE_MIENTRAS  reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    HACER           reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    BUCLE_PARA      reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    RETORNAR        reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    ROMPER          reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)
    LLAVE_DER       reduce using rule 40 (BVar -> IDENTIFICADOR SFunc AVar .)


state 191

    (67) AFunc -> IDENTIFICADOR BFunc .

    ASIGNAR         reduce using rule 67 (AFunc -> IDENTIFICADOR BFunc .)
    PUNTO_COMA      reduce using rule 67 (AFunc -> IDENTIFICADOR BFunc .)
    COMA            reduce using rule 67 (AFunc -> IDENTIFICADOR BFunc .)


state 192

    (68) BFunc -> COMA . IDENTIFICADOR BFunc

    IDENTIFICADOR   shift and go to state 216


state 193

    (69) BFunc -> PAREN_DER .

    ASIGNAR         reduce using rule 69 (BFunc -> PAREN_DER .)
    PUNTO_COMA      reduce using rule 69 (BFunc -> PAREN_DER .)
    COMA            reduce using rule 69 (BFunc -> PAREN_DER .)


state 194

    (91) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .

    IDENTIFICADOR   reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    CONDICIONAL     reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    BUCLE_MIENTRAS  reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    HACER           reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    BUCLE_PARA      reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    RETORNAR        reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    ROMPER          reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_ENTERO     reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_CADENA     reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_LARGO      reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_VACIO      reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_CARACTER   reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_FLOTANTE   reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_DOUBLE     reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    $end            reduce using rule 91 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)


state 195

    (95) CStruct -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 95 (CStruct -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 95 (CStruct -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 95 (CStruct -> PUNTO_COMA .)
    HACER           reduce using rule 95 (CStruct -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 95 (CStruct -> PUNTO_COMA .)
    RETORNAR        reduce using rule 95 (CStruct -> PUNTO_COMA .)
    ROMPER          reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 95 (CStruct -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 95 (CStruct -> PUNTO_COMA .)
    $end            reduce using rule 95 (CStruct -> PUNTO_COMA .)


state 196

    (96) CStruct -> DStruct .

    IDENTIFICADOR   reduce using rule 96 (CStruct -> DStruct .)
    CONDICIONAL     reduce using rule 96 (CStruct -> DStruct .)
    BUCLE_MIENTRAS  reduce using rule 96 (CStruct -> DStruct .)
    HACER           reduce using rule 96 (CStruct -> DStruct .)
    BUCLE_PARA      reduce using rule 96 (CStruct -> DStruct .)
    RETORNAR        reduce using rule 96 (CStruct -> DStruct .)
    ROMPER          reduce using rule 96 (CStruct -> DStruct .)
    TIPO_ENTERO     reduce using rule 96 (CStruct -> DStruct .)
    TIPO_CADENA     reduce using rule 96 (CStruct -> DStruct .)
    TIPO_LARGO      reduce using rule 96 (CStruct -> DStruct .)
    TIPO_VACIO      reduce using rule 96 (CStruct -> DStruct .)
    TIPO_CARACTER   reduce using rule 96 (CStruct -> DStruct .)
    TIPO_FLOTANTE   reduce using rule 96 (CStruct -> DStruct .)
    TIPO_DOUBLE     reduce using rule 96 (CStruct -> DStruct .)
    $end            reduce using rule 96 (CStruct -> DStruct .)


state 197

    (97) DStruct -> IDENTIFICADOR EStruct .

    IDENTIFICADOR   reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    CONDICIONAL     reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    BUCLE_MIENTRAS  reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    HACER           reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    BUCLE_PARA      reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    RETORNAR        reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    ROMPER          reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_ENTERO     reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_CADENA     reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_LARGO      reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_VACIO      reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_CARACTER   reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_FLOTANTE   reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_DOUBLE     reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)
    $end            reduce using rule 97 (DStruct -> IDENTIFICADOR EStruct .)


state 198

    (98) EStruct -> COMA . DStruct
    (97) DStruct -> . IDENTIFICADOR EStruct

    IDENTIFICADOR   shift and go to state 159

    DStruct                        shift and go to state 217

state 199

    (99) EStruct -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 99 (EStruct -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 99 (EStruct -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 99 (EStruct -> PUNTO_COMA .)
    HACER           reduce using rule 99 (EStruct -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 99 (EStruct -> PUNTO_COMA .)
    RETORNAR        reduce using rule 99 (EStruct -> PUNTO_COMA .)
    ROMPER          reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 99 (EStruct -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 99 (EStruct -> PUNTO_COMA .)
    $end            reduce using rule 99 (EStruct -> PUNTO_COMA .)


state 200

    (100) FStruct -> PUNTO_COMA BStruct .

    LLAVE_DER       reduce using rule 100 (FStruct -> PUNTO_COMA BStruct .)


state 201

    (101) FStruct -> CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER PUNTO_COMA BStruct

    CORCHETE_DER    shift and go to state 218


state 202

    (81) AArr -> NUMERO_ENTERO CORCHETE_DER BArr .

    IDENTIFICADOR   reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    CONDICIONAL     reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    BUCLE_MIENTRAS  reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    HACER           reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    BUCLE_PARA      reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    RETORNAR        reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    ROMPER          reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_ENTERO     reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_CADENA     reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_LARGO      reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_VACIO      reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_CARACTER   reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_FLOTANTE   reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_DOUBLE     reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    $end            reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    LLAVE_DER       reduce using rule 81 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)


state 203

    (83) BArr -> CArr .

    IDENTIFICADOR   reduce using rule 83 (BArr -> CArr .)
    CONDICIONAL     reduce using rule 83 (BArr -> CArr .)
    BUCLE_MIENTRAS  reduce using rule 83 (BArr -> CArr .)
    HACER           reduce using rule 83 (BArr -> CArr .)
    BUCLE_PARA      reduce using rule 83 (BArr -> CArr .)
    RETORNAR        reduce using rule 83 (BArr -> CArr .)
    ROMPER          reduce using rule 83 (BArr -> CArr .)
    TIPO_ENTERO     reduce using rule 83 (BArr -> CArr .)
    TIPO_CADENA     reduce using rule 83 (BArr -> CArr .)
    TIPO_LARGO      reduce using rule 83 (BArr -> CArr .)
    TIPO_VACIO      reduce using rule 83 (BArr -> CArr .)
    TIPO_CARACTER   reduce using rule 83 (BArr -> CArr .)
    TIPO_FLOTANTE   reduce using rule 83 (BArr -> CArr .)
    TIPO_DOUBLE     reduce using rule 83 (BArr -> CArr .)
    $end            reduce using rule 83 (BArr -> CArr .)
    LLAVE_DER       reduce using rule 83 (BArr -> CArr .)


state 204

    (84) BArr -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 84 (BArr -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 84 (BArr -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 84 (BArr -> PUNTO_COMA .)
    HACER           reduce using rule 84 (BArr -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 84 (BArr -> PUNTO_COMA .)
    RETORNAR        reduce using rule 84 (BArr -> PUNTO_COMA .)
    ROMPER          reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 84 (BArr -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 84 (BArr -> PUNTO_COMA .)
    $end            reduce using rule 84 (BArr -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 84 (BArr -> PUNTO_COMA .)


state 205

    (85) CArr -> ASIGNAR LLAVE_IZQ . DArr
    (86) DArr -> . SOpe EArr
    (87) DArr -> . CARACTER EArr
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    CARACTER        shift and go to state 221
    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    DArr                           shift and go to state 219
    SOpe                           shift and go to state 220
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 206

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 222


state 207

    (70) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .

    IDENTIFICADOR   reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    CONDICIONAL     reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    BUCLE_MIENTRAS  reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    HACER           reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    BUCLE_PARA      reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    RETORNAR        reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    ROMPER          reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_ENTERO     reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_CADENA     reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_LARGO      reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_VACIO      reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_CARACTER   reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_FLOTANTE   reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_DOUBLE     reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    $end            reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    LLAVE_DER       reduce using rule 70 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)


state 208

    (71) AIfElse -> SInst . LLAVE_DER BIfElse

    LLAVE_DER       shift and go to state 223


state 209

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 224


state 210

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ . SOpe PAREN_DER PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 225
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 211

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA . SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (105) SAsigVarFor -> . IDENTIFICADOR ASIGNAR SOpe

    IDENTIFICADOR   shift and go to state 227

    SAsigVarFor                    shift and go to state 226

state 212

    (107) ADecVarFor -> ASIGNAR BDecVarFor .

    PUNTO_COMA      reduce using rule 107 (ADecVarFor -> ASIGNAR BDecVarFor .)


state 213

    (109) BDecVarFor -> SOpe . CDecVarFor
    (110) CDecVarFor -> . COMA BDecVarFor
    (111) CDecVarFor -> . empty
    (4) empty -> .

    COMA            shift and go to state 229
    PUNTO_COMA      reduce using rule 4 (empty -> .)

    CDecVarFor                     shift and go to state 228
    empty                          shift and go to state 230

state 214

    (108) ADecVarFor -> COMA BDecVarFor .

    PUNTO_COMA      reduce using rule 108 (ADecVarFor -> COMA BDecVarFor .)


state 215

    (56) JVar -> LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    ESTRUCTURA      reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 56 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)


state 216

    (68) BFunc -> COMA IDENTIFICADOR . BFunc
    (68) BFunc -> . COMA IDENTIFICADOR BFunc
    (69) BFunc -> . PAREN_DER

    COMA            shift and go to state 192
    PAREN_DER       shift and go to state 193

    BFunc                          shift and go to state 231

state 217

    (98) EStruct -> COMA DStruct .

    IDENTIFICADOR   reduce using rule 98 (EStruct -> COMA DStruct .)
    CONDICIONAL     reduce using rule 98 (EStruct -> COMA DStruct .)
    BUCLE_MIENTRAS  reduce using rule 98 (EStruct -> COMA DStruct .)
    HACER           reduce using rule 98 (EStruct -> COMA DStruct .)
    BUCLE_PARA      reduce using rule 98 (EStruct -> COMA DStruct .)
    RETORNAR        reduce using rule 98 (EStruct -> COMA DStruct .)
    ROMPER          reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_ENTERO     reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_CADENA     reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_LARGO      reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_VACIO      reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_CARACTER   reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_FLOTANTE   reduce using rule 98 (EStruct -> COMA DStruct .)
    TIPO_DOUBLE     reduce using rule 98 (EStruct -> COMA DStruct .)
    $end            reduce using rule 98 (EStruct -> COMA DStruct .)


state 218

    (101) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER . PUNTO_COMA BStruct

    PUNTO_COMA      shift and go to state 232


state 219

    (85) CArr -> ASIGNAR LLAVE_IZQ DArr .

    IDENTIFICADOR   reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    CONDICIONAL     reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    BUCLE_MIENTRAS  reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    HACER           reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    BUCLE_PARA      reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    RETORNAR        reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    ROMPER          reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_ENTERO     reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_CADENA     reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_LARGO      reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_VACIO      reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_CARACTER   reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_FLOTANTE   reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_DOUBLE     reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    $end            reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    LLAVE_DER       reduce using rule 85 (CArr -> ASIGNAR LLAVE_IZQ DArr .)


state 220

    (86) DArr -> SOpe . EArr
    (88) EArr -> . COMA DArr
    (89) EArr -> . LLAVE_DER PUNTO_COMA

    COMA            shift and go to state 234
    LLAVE_DER       shift and go to state 235

    EArr                           shift and go to state 233

state 221

    (87) DArr -> CARACTER . EArr
    (88) EArr -> . COMA DArr
    (89) EArr -> . LLAVE_DER PUNTO_COMA

    COMA            shift and go to state 234
    LLAVE_DER       shift and go to state 235

    EArr                           shift and go to state 236

state 222

    (79) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    HACER           reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    $end            reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 79 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)


state 223

    (71) AIfElse -> SInst LLAVE_DER . BIfElse
    (72) BIfElse -> . empty
    (73) BIfElse -> . CASO_CONTRARIO CIfElse
    (4) empty -> .

    CASO_CONTRARIO  shift and go to state 239
    IDENTIFICADOR   reduce using rule 4 (empty -> .)
    CONDICIONAL     reduce using rule 4 (empty -> .)
    BUCLE_MIENTRAS  reduce using rule 4 (empty -> .)
    HACER           reduce using rule 4 (empty -> .)
    BUCLE_PARA      reduce using rule 4 (empty -> .)
    RETORNAR        reduce using rule 4 (empty -> .)
    ROMPER          reduce using rule 4 (empty -> .)
    TIPO_ENTERO     reduce using rule 4 (empty -> .)
    TIPO_CADENA     reduce using rule 4 (empty -> .)
    TIPO_LARGO      reduce using rule 4 (empty -> .)
    TIPO_VACIO      reduce using rule 4 (empty -> .)
    TIPO_CARACTER   reduce using rule 4 (empty -> .)
    TIPO_FLOTANTE   reduce using rule 4 (empty -> .)
    TIPO_DOUBLE     reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BIfElse                        shift and go to state 237
    empty                          shift and go to state 238

state 224

    (102) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 102 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)


state 225

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 240


state 226

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor . PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_DER       shift and go to state 241


state 227

    (105) SAsigVarFor -> IDENTIFICADOR . ASIGNAR SOpe

    ASIGNAR         shift and go to state 242


state 228

    (109) BDecVarFor -> SOpe CDecVarFor .

    PUNTO_COMA      reduce using rule 109 (BDecVarFor -> SOpe CDecVarFor .)


state 229

    (110) CDecVarFor -> COMA . BDecVarFor
    (109) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BDecVarFor                     shift and go to state 243
    SOpe                           shift and go to state 213
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 230

    (111) CDecVarFor -> empty .

    PUNTO_COMA      reduce using rule 111 (CDecVarFor -> empty .)


state 231

    (68) BFunc -> COMA IDENTIFICADOR BFunc .

    ASIGNAR         reduce using rule 68 (BFunc -> COMA IDENTIFICADOR BFunc .)
    PUNTO_COMA      reduce using rule 68 (BFunc -> COMA IDENTIFICADOR BFunc .)
    COMA            reduce using rule 68 (BFunc -> COMA IDENTIFICADOR BFunc .)


state 232

    (101) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA . BStruct
    (93) BStruct -> . empty
    (94) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 244
    empty                          shift and go to state 76
    STipos                         shift and go to state 77

state 233

    (86) DArr -> SOpe EArr .

    IDENTIFICADOR   reduce using rule 86 (DArr -> SOpe EArr .)
    CONDICIONAL     reduce using rule 86 (DArr -> SOpe EArr .)
    BUCLE_MIENTRAS  reduce using rule 86 (DArr -> SOpe EArr .)
    HACER           reduce using rule 86 (DArr -> SOpe EArr .)
    BUCLE_PARA      reduce using rule 86 (DArr -> SOpe EArr .)
    RETORNAR        reduce using rule 86 (DArr -> SOpe EArr .)
    ROMPER          reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_ENTERO     reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_CADENA     reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_LARGO      reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_VACIO      reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_CARACTER   reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_FLOTANTE   reduce using rule 86 (DArr -> SOpe EArr .)
    TIPO_DOUBLE     reduce using rule 86 (DArr -> SOpe EArr .)
    $end            reduce using rule 86 (DArr -> SOpe EArr .)
    LLAVE_DER       reduce using rule 86 (DArr -> SOpe EArr .)


state 234

    (88) EArr -> COMA . DArr
    (86) DArr -> . SOpe EArr
    (87) DArr -> . CARACTER EArr
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    CARACTER        shift and go to state 221
    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    DArr                           shift and go to state 245
    SOpe                           shift and go to state 220
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 235

    (89) EArr -> LLAVE_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 246


state 236

    (87) DArr -> CARACTER EArr .

    IDENTIFICADOR   reduce using rule 87 (DArr -> CARACTER EArr .)
    CONDICIONAL     reduce using rule 87 (DArr -> CARACTER EArr .)
    BUCLE_MIENTRAS  reduce using rule 87 (DArr -> CARACTER EArr .)
    HACER           reduce using rule 87 (DArr -> CARACTER EArr .)
    BUCLE_PARA      reduce using rule 87 (DArr -> CARACTER EArr .)
    RETORNAR        reduce using rule 87 (DArr -> CARACTER EArr .)
    ROMPER          reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_ENTERO     reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_CADENA     reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_LARGO      reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_VACIO      reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_CARACTER   reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_FLOTANTE   reduce using rule 87 (DArr -> CARACTER EArr .)
    TIPO_DOUBLE     reduce using rule 87 (DArr -> CARACTER EArr .)
    $end            reduce using rule 87 (DArr -> CARACTER EArr .)
    LLAVE_DER       reduce using rule 87 (DArr -> CARACTER EArr .)


state 237

    (71) AIfElse -> SInst LLAVE_DER BIfElse .

    IDENTIFICADOR   reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    CONDICIONAL     reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    BUCLE_MIENTRAS  reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    HACER           reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    BUCLE_PARA      reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    RETORNAR        reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    ROMPER          reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_ENTERO     reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_CADENA     reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_LARGO      reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_VACIO      reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_CARACTER   reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_FLOTANTE   reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_DOUBLE     reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    $end            reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)
    LLAVE_DER       reduce using rule 71 (AIfElse -> SInst LLAVE_DER BIfElse .)


state 238

    (72) BIfElse -> empty .

    IDENTIFICADOR   reduce using rule 72 (BIfElse -> empty .)
    CONDICIONAL     reduce using rule 72 (BIfElse -> empty .)
    BUCLE_MIENTRAS  reduce using rule 72 (BIfElse -> empty .)
    HACER           reduce using rule 72 (BIfElse -> empty .)
    BUCLE_PARA      reduce using rule 72 (BIfElse -> empty .)
    RETORNAR        reduce using rule 72 (BIfElse -> empty .)
    ROMPER          reduce using rule 72 (BIfElse -> empty .)
    TIPO_ENTERO     reduce using rule 72 (BIfElse -> empty .)
    TIPO_CADENA     reduce using rule 72 (BIfElse -> empty .)
    TIPO_LARGO      reduce using rule 72 (BIfElse -> empty .)
    TIPO_VACIO      reduce using rule 72 (BIfElse -> empty .)
    TIPO_CARACTER   reduce using rule 72 (BIfElse -> empty .)
    TIPO_FLOTANTE   reduce using rule 72 (BIfElse -> empty .)
    TIPO_DOUBLE     reduce using rule 72 (BIfElse -> empty .)
    $end            reduce using rule 72 (BIfElse -> empty .)
    LLAVE_DER       reduce using rule 72 (BIfElse -> empty .)


state 239

    (73) BIfElse -> CASO_CONTRARIO . CIfElse
    (74) CIfElse -> . LLAVE_IZQ AIfElse
    (75) CIfElse -> . SIfElse
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse

    LLAVE_IZQ       shift and go to state 248
    CONDICIONAL     shift and go to state 28

    CIfElse                        shift and go to state 247
    SIfElse                        shift and go to state 249

state 240

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 250


state 241

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER . LLAVE_IZQ SInst LLAVE_DER

    LLAVE_IZQ       shift and go to state 251


state 242

    (105) SAsigVarFor -> IDENTIFICADOR ASIGNAR . SOpe
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . IDENTIFICADOR DOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO

    PAREN_IZQ       shift and go to state 60
    IDENTIFICADOR   shift and go to state 61
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    SOpe                           shift and go to state 252
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59

state 243

    (110) CDecVarFor -> COMA BDecVarFor .

    PUNTO_COMA      reduce using rule 110 (CDecVarFor -> COMA BDecVarFor .)


state 244

    (101) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct .

    LLAVE_DER       reduce using rule 101 (FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct .)


state 245

    (88) EArr -> COMA DArr .

    IDENTIFICADOR   reduce using rule 88 (EArr -> COMA DArr .)
    CONDICIONAL     reduce using rule 88 (EArr -> COMA DArr .)
    BUCLE_MIENTRAS  reduce using rule 88 (EArr -> COMA DArr .)
    HACER           reduce using rule 88 (EArr -> COMA DArr .)
    BUCLE_PARA      reduce using rule 88 (EArr -> COMA DArr .)
    RETORNAR        reduce using rule 88 (EArr -> COMA DArr .)
    ROMPER          reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_ENTERO     reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_CADENA     reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_LARGO      reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_VACIO      reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_CARACTER   reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_FLOTANTE   reduce using rule 88 (EArr -> COMA DArr .)
    TIPO_DOUBLE     reduce using rule 88 (EArr -> COMA DArr .)
    $end            reduce using rule 88 (EArr -> COMA DArr .)
    LLAVE_DER       reduce using rule 88 (EArr -> COMA DArr .)


state 246

    (89) EArr -> LLAVE_DER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    HACER           reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    RETORNAR        reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    ROMPER          reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    $end            reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 89 (EArr -> LLAVE_DER PUNTO_COMA .)


state 247

    (73) BIfElse -> CASO_CONTRARIO CIfElse .

    IDENTIFICADOR   reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    CONDICIONAL     reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    BUCLE_MIENTRAS  reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    HACER           reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    BUCLE_PARA      reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    RETORNAR        reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    ROMPER          reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_ENTERO     reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_CADENA     reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_LARGO      reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_VACIO      reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_CARACTER   reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_FLOTANTE   reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_DOUBLE     reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    $end            reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)
    LLAVE_DER       reduce using rule 73 (BIfElse -> CASO_CONTRARIO CIfElse .)


state 248

    (74) CIfElse -> LLAVE_IZQ . AIfElse
    (71) AIfElse -> . SInst LLAVE_DER BIfElse
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    AIfElse                        shift and go to state 253
    SInst                          shift and go to state 208
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 249

    (75) CIfElse -> SIfElse .

    IDENTIFICADOR   reduce using rule 75 (CIfElse -> SIfElse .)
    CONDICIONAL     reduce using rule 75 (CIfElse -> SIfElse .)
    BUCLE_MIENTRAS  reduce using rule 75 (CIfElse -> SIfElse .)
    HACER           reduce using rule 75 (CIfElse -> SIfElse .)
    BUCLE_PARA      reduce using rule 75 (CIfElse -> SIfElse .)
    RETORNAR        reduce using rule 75 (CIfElse -> SIfElse .)
    ROMPER          reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_ENTERO     reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_CADENA     reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_LARGO      reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_VACIO      reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_CARACTER   reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_FLOTANTE   reduce using rule 75 (CIfElse -> SIfElse .)
    TIPO_DOUBLE     reduce using rule 75 (CIfElse -> SIfElse .)
    $end            reduce using rule 75 (CIfElse -> SIfElse .)
    LLAVE_DER       reduce using rule 75 (CIfElse -> SIfElse .)


state 250

    (103) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    HACER           reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    RETORNAR        reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    ROMPER          reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 103 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)


state 251

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (34) SVar -> . STipos IDENTIFICADOR FVar
    (35) SVar -> . IDENTIFICADOR DVar
    (70) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (102) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (103) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (104) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (76) SRet -> . RETORNAR ARet
    (79) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (80) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (112) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (57) STipos -> . TIPO_ENTERO
    (58) STipos -> . TIPO_CADENA
    (59) STipos -> . TIPO_LARGO
    (60) STipos -> . TIPO_VACIO
    (61) STipos -> . TIPO_CARACTER
    (62) STipos -> . TIPO_FLOTANTE
    (63) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 254
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 252

    (105) SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe .

    PAREN_DER       reduce using rule 105 (SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe .)


state 253

    (74) CIfElse -> LLAVE_IZQ AIfElse .

    IDENTIFICADOR   reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    CONDICIONAL     reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    BUCLE_MIENTRAS  reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    HACER           reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    BUCLE_PARA      reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    RETORNAR        reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    ROMPER          reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_ENTERO     reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_CADENA     reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_LARGO      reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_VACIO      reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_CARACTER   reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_FLOTANTE   reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_DOUBLE     reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    $end            reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)
    LLAVE_DER       reduce using rule 74 (CIfElse -> LLAVE_IZQ AIfElse .)


state 254

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 255


state 255

    (104) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 104 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 115 resolved using rule (DOpe -> empty)
WARNING: rejected rule (SFunc -> empty) in state 115
