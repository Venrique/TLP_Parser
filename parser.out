Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_LOGICO
    ASIGNAR_DIV
    ASIGNAR_MULT
    ASIGNAR_RESTA
    ASIGNAR_SUMA
    CADENA
    COMILLA_DOBLE
    COMILLA_SIMPLE
    COMPARAR_DIF
    DECREMENTO
    DIR_DEFINIR
    DIR_INCLUIR
    DIR_UNDEFINIR
    DIVISION_ENTERA
    ESTATICO
    INCREMENTO
    MAYOR_IGUAL
    MENOR_IGUAL
    NEGACION
    OR_LOGICO
    eof

Grammar

Rule 0     S' -> program
Rule 1     program -> SVar program
Rule 2     program -> SStruct SInst
Rule 3     program -> empty
Rule 4     empty -> <empty>
Rule 5     SInst -> SVar SInst
Rule 6     SInst -> SIfElse SInst
Rule 7     SInst -> SWhile SInst
Rule 8     SInst -> SDoWhile SInst
Rule 9     SInst -> SFor SInst
Rule 10    SInst -> SRet SInst
Rule 11    SInst -> SArr SInst
Rule 12    SInst -> SBreak SInst
Rule 13    SInst -> empty
Rule 14    SOpe -> AOpe ZOpe
Rule 15    ZOpe -> SUMAR AOpe ZOpe
Rule 16    ZOpe -> RESTAR AOpe ZOpe
Rule 17    ZOpe -> COMPARAR_IGUAL AOpe ZOpe
Rule 18    ZOpe -> MAYOR_QUE AOpe ZOpe
Rule 19    ZOpe -> MENOR_QUE AOpe ZOpe
Rule 20    ZOpe -> empty
Rule 21    AOpe -> COpe BOpe
Rule 22    BOpe -> MULTIPLICAR COpe BOpe
Rule 23    BOpe -> DIVIDIR COpe BOpe
Rule 24    BOpe -> MODULO COpe BOpe
Rule 25    BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe
Rule 26    BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe
Rule 27    BOpe -> empty
Rule 28    DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
Rule 29    DOpe -> empty
Rule 30    COpe -> PAREN_IZQ SOpe PAREN_DER
Rule 31    COpe -> EOpe
Rule 32    COpe -> NUMERO_DECIMAL
Rule 33    COpe -> NUMERO_ENTERO
Rule 34    EOpe -> IDENTIFICADOR FOpe
Rule 35    FOpe -> DOpe
Rule 36    FOpe -> IDENTIFICADOR FOpe
Rule 37    FOpe -> PUNTO FOpe
Rule 38    SVar -> STipos IDENTIFICADOR FVar
Rule 39    SVar -> IDENTIFICADOR DVar
Rule 40    AVar -> ASIGNAR BVar
Rule 41    AVar -> COMA IDENTIFICADOR AVar
Rule 42    AVar -> PUNTO_COMA
Rule 43    BVar -> SOpe CVar
Rule 44    BVar -> CARACTER CVar
Rule 45    BVar -> IDENTIFICADOR SFunc AVar
Rule 46    CVar -> PUNTO_COMA
Rule 47    CVar -> COMA BVar
Rule 48    DVar -> ASIGNAR EVar
Rule 49    DVar -> PUNTO_COMA
Rule 50    EVar -> SOpe PUNTO_COMA
Rule 51    EVar -> CARACTER PUNTO_COMA
Rule 52    EVar -> IDENTIFICADOR SFunc DVar
Rule 53    FVar -> AVar
Rule 54    FVar -> PAREN_IZQ GVar
Rule 55    GVar -> STipos HVar
Rule 56    GVar -> PAREN_DER JVar
Rule 57    HVar -> IDENTIFICADOR IVar
Rule 58    HVar -> IVar
Rule 59    IVar -> COMA GVar
Rule 60    IVar -> PAREN_DER JVar
Rule 61    JVar -> PUNTO_COMA
Rule 62    JVar -> LLAVE_IZQ SInst LLAVE_DER
Rule 63    STipos -> TIPO_ENTERO
Rule 64    STipos -> TIPO_CADENA
Rule 65    STipos -> TIPO_LARGO
Rule 66    STipos -> TIPO_VACIO
Rule 67    STipos -> TIPO_CARACTER
Rule 68    STipos -> TIPO_FLOTANTE
Rule 69    STipos -> TIPO_DOUBLE
Rule 70    SFunc -> PAREN_IZQ AFunc
Rule 71    SFunc -> empty
Rule 72    AFunc -> PAREN_DER
Rule 73    AFunc -> IDENTIFICADOR BFunc
Rule 74    BFunc -> COMA IDENTIFICADOR BFunc
Rule 75    BFunc -> PAREN_DER
Rule 76    SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
Rule 77    AIfElse -> SInst LLAVE_DER BIfElse
Rule 78    BIfElse -> CASO_CONTRARIO CIfElse
Rule 79    BIfElse -> empty
Rule 80    CIfElse -> LLAVE_IZQ AIfElse
Rule 81    CIfElse -> SIfElse
Rule 82    SRet -> RETORNAR ARet
Rule 83    ARet -> SOpe PUNTO_COMA
Rule 84    ARet -> CARACTER PUNTO_COMA
Rule 85    SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
Rule 86    SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr
Rule 87    AArr -> NUMERO_ENTERO CORCHETE_DER BArr
Rule 88    AArr -> CORCHETE_DER CArr
Rule 89    BArr -> CArr
Rule 90    BArr -> PUNTO_COMA
Rule 91    CArr -> ASIGNAR LLAVE_IZQ DArr
Rule 92    DArr -> SOpe EArr
Rule 93    DArr -> CARACTER EArr
Rule 94    EArr -> COMA DArr
Rule 95    EArr -> LLAVE_DER PUNTO_COMA
Rule 96    SStruct -> ESTRUCTURA AStruct
Rule 97    AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct
Rule 98    AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct
Rule 99    BStruct -> empty
Rule 100   BStruct -> STipos IDENTIFICADOR FStruct
Rule 101   CStruct -> PUNTO_COMA
Rule 102   CStruct -> DStruct
Rule 103   DStruct -> IDENTIFICADOR EStruct
Rule 104   EStruct -> COMA DStruct
Rule 105   EStruct -> PUNTO_COMA
Rule 106   FStruct -> PUNTO_COMA BStruct
Rule 107   FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct
Rule 108   SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
Rule 109   SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
Rule 110   SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
Rule 111   SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe
Rule 112   SDecVarFor -> STipos IDENTIFICADOR ADecVarFor
Rule 113   ADecVarFor -> ASIGNAR BDecVarFor
Rule 114   ADecVarFor -> COMA BDecVarFor
Rule 115   BDecVarFor -> SOpe CDecVarFor
Rule 116   CDecVarFor -> COMA BDecVarFor
Rule 117   CDecVarFor -> empty
Rule 118   SBreak -> ROMPER PUNTO_COMA

Terminals, with rules where they appear

AND_LOGICO           : 
AND_LOGICO_CONDICIONAL : 25
ASIGNAR              : 40 48 85 91 111 113
ASIGNAR_DIV          : 
ASIGNAR_MULT         : 
ASIGNAR_RESTA        : 
ASIGNAR_SUMA         : 
BUCLE_MIENTRAS       : 108 109
BUCLE_PARA           : 110
CADENA               : 
CARACTER             : 44 51 84 93
CASO_CONTRARIO       : 78
COMA                 : 41 47 59 74 94 104 114 116
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
COMPARAR_DIF         : 
COMPARAR_IGUAL       : 17
CONDICIONAL          : 76
CORCHETE_DER         : 28 85 87 88 107
CORCHETE_IZQ         : 28 85 86 107
DECREMENTO           : 
DIR_DEFINIR          : 
DIR_INCLUIR          : 
DIR_UNDEFINIR        : 
DIVIDIR              : 23
DIVISION_ENTERA      : 
ESTATICO             : 
ESTRUCTURA           : 96
HACER                : 109
IDENTIFICADOR        : 34 36 38 39 41 45 52 57 73 74 85 86 97 100 103 111 112
INCREMENTO           : 
LLAVE_DER            : 62 77 95 97 98 108 109 110
LLAVE_IZQ            : 62 76 80 91 97 98 108 109 110
MAYOR_IGUAL          : 
MAYOR_QUE            : 18
MENOR_IGUAL          : 
MENOR_QUE            : 19
MODULO               : 24
MULTIPLICAR          : 22
NEGACION             : 
NUMERO_DECIMAL       : 32
NUMERO_ENTERO        : 28 33 85 87 107
OR_LOGICO            : 
OR_LOGICO_CONDICIONAL : 26
PAREN_DER            : 30 56 60 72 75 76 108 109 110
PAREN_IZQ            : 30 54 70 76 108 109 110
PUNTO                : 37
PUNTO_COMA           : 42 46 49 50 51 61 83 84 85 90 95 101 105 106 107 109 110 110 118
RESTAR               : 16
RETORNAR             : 82
ROMPER               : 118
SUMAR                : 15
TIPO_CADENA          : 64
TIPO_CARACTER        : 67
TIPO_DOUBLE          : 69
TIPO_ENTERO          : 63
TIPO_FLOTANTE        : 68
TIPO_LARGO           : 65
TIPO_VACIO           : 66
eof                  : 
error                : 

Nonterminals, with rules where they appear

AArr                 : 86
ADecVarFor           : 112
AFunc                : 70
AIfElse              : 76 80
AOpe                 : 14 15 16 17 18 19
ARet                 : 82
AStruct              : 96
AVar                 : 41 45 53
BArr                 : 87
BDecVarFor           : 113 114 116
BFunc                : 73 74
BIfElse              : 77
BOpe                 : 21 22 23 24 25 26
BStruct              : 97 98 106 107
BVar                 : 40 47
CArr                 : 88 89
CDecVarFor           : 115
CIfElse              : 78
COpe                 : 21 22 23 24 25 26
CStruct              : 97
CVar                 : 43 44
DArr                 : 91 94
DOpe                 : 35
DStruct              : 98 102 104
DVar                 : 39 52
EArr                 : 92 93
EOpe                 : 31
EStruct              : 103
EVar                 : 48
FOpe                 : 34 36 37
FStruct              : 100
FVar                 : 38
GVar                 : 54 59
HVar                 : 55
IVar                 : 57 58
JVar                 : 56 60
SArr                 : 11
SAsigVarFor          : 110
SBreak               : 12
SDecVarFor           : 110
SDoWhile             : 8
SFor                 : 9
SFunc                : 45 52
SIfElse              : 6 81
SInst                : 2 5 6 7 8 9 10 11 12 62 77 108 109 110
SOpe                 : 30 43 50 76 83 85 92 108 109 110 111 115
SRet                 : 10
SStruct              : 2
STipos               : 38 55 86 100 112
SVar                 : 1 5
SWhile               : 7
ZOpe                 : 14 15 16 17 18 19
empty                : 3 13 20 27 29 71 79 99 117
program              : 1 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . SVar program
    (2) program -> . SStruct SInst
    (3) program -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (96) SStruct -> . ESTRUCTURA AStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 6
    ESTRUCTURA      shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    program                        shift and go to state 1
    SVar                           shift and go to state 2
    SStruct                        shift and go to state 3
    empty                          shift and go to state 4
    STipos                         shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> SVar . program
    (1) program -> . SVar program
    (2) program -> . SStruct SInst
    (3) program -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (96) SStruct -> . ESTRUCTURA AStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 6
    ESTRUCTURA      shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SVar                           shift and go to state 2
    program                        shift and go to state 15
    SStruct                        shift and go to state 3
    empty                          shift and go to state 4
    STipos                         shift and go to state 5

state 3

    (2) program -> SStruct . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 16
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 4

    (3) program -> empty .

    $end            reduce using rule 3 (program -> empty .)


state 5

    (38) SVar -> STipos . IDENTIFICADOR FVar

    IDENTIFICADOR   shift and go to state 34


state 6

    (39) SVar -> IDENTIFICADOR . DVar
    (48) DVar -> . ASIGNAR EVar
    (49) DVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 35

state 7

    (96) SStruct -> ESTRUCTURA . AStruct
    (97) AStruct -> . IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct
    (98) AStruct -> . LLAVE_IZQ BStruct LLAVE_DER DStruct

    IDENTIFICADOR   shift and go to state 39
    LLAVE_IZQ       shift and go to state 40

    AStruct                        shift and go to state 38

state 8

    (63) STipos -> TIPO_ENTERO .

    IDENTIFICADOR   reduce using rule 63 (STipos -> TIPO_ENTERO .)
    COMA            reduce using rule 63 (STipos -> TIPO_ENTERO .)
    PAREN_DER       reduce using rule 63 (STipos -> TIPO_ENTERO .)


state 9

    (64) STipos -> TIPO_CADENA .

    IDENTIFICADOR   reduce using rule 64 (STipos -> TIPO_CADENA .)
    COMA            reduce using rule 64 (STipos -> TIPO_CADENA .)
    PAREN_DER       reduce using rule 64 (STipos -> TIPO_CADENA .)


state 10

    (65) STipos -> TIPO_LARGO .

    IDENTIFICADOR   reduce using rule 65 (STipos -> TIPO_LARGO .)
    COMA            reduce using rule 65 (STipos -> TIPO_LARGO .)
    PAREN_DER       reduce using rule 65 (STipos -> TIPO_LARGO .)


state 11

    (66) STipos -> TIPO_VACIO .

    IDENTIFICADOR   reduce using rule 66 (STipos -> TIPO_VACIO .)
    COMA            reduce using rule 66 (STipos -> TIPO_VACIO .)
    PAREN_DER       reduce using rule 66 (STipos -> TIPO_VACIO .)


state 12

    (67) STipos -> TIPO_CARACTER .

    IDENTIFICADOR   reduce using rule 67 (STipos -> TIPO_CARACTER .)
    COMA            reduce using rule 67 (STipos -> TIPO_CARACTER .)
    PAREN_DER       reduce using rule 67 (STipos -> TIPO_CARACTER .)


state 13

    (68) STipos -> TIPO_FLOTANTE .

    IDENTIFICADOR   reduce using rule 68 (STipos -> TIPO_FLOTANTE .)
    COMA            reduce using rule 68 (STipos -> TIPO_FLOTANTE .)
    PAREN_DER       reduce using rule 68 (STipos -> TIPO_FLOTANTE .)


state 14

    (69) STipos -> TIPO_DOUBLE .

    IDENTIFICADOR   reduce using rule 69 (STipos -> TIPO_DOUBLE .)
    COMA            reduce using rule 69 (STipos -> TIPO_DOUBLE .)
    PAREN_DER       reduce using rule 69 (STipos -> TIPO_DOUBLE .)


state 15

    (1) program -> SVar program .

    $end            reduce using rule 1 (program -> SVar program .)


state 16

    (2) program -> SStruct SInst .

    $end            reduce using rule 2 (program -> SStruct SInst .)


state 17

    (5) SInst -> SVar . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SVar                           shift and go to state 17
    SInst                          shift and go to state 41
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 18

    (6) SInst -> SIfElse . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SIfElse                        shift and go to state 18
    SInst                          shift and go to state 42
    SVar                           shift and go to state 17
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 19

    (7) SInst -> SWhile . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SWhile                         shift and go to state 19
    SInst                          shift and go to state 43
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 20

    (8) SInst -> SDoWhile . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SDoWhile                       shift and go to state 20
    SInst                          shift and go to state 44
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 21

    (9) SInst -> SFor . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SFor                           shift and go to state 21
    SInst                          shift and go to state 45
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 22

    (10) SInst -> SRet . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SRet                           shift and go to state 22
    SInst                          shift and go to state 46
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 23

    (11) SInst -> SArr . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SArr                           shift and go to state 23
    SInst                          shift and go to state 47
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 24

    (12) SInst -> SBreak . SInst
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SBreak                         shift and go to state 24
    SInst                          shift and go to state 48
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 25

    (13) SInst -> empty .

    $end            reduce using rule 13 (SInst -> empty .)
    LLAVE_DER       reduce using rule 13 (SInst -> empty .)


state 26

    (38) SVar -> STipos . IDENTIFICADOR FVar
    (86) SArr -> STipos . IDENTIFICADOR CORCHETE_IZQ AArr

    IDENTIFICADOR   shift and go to state 49


state 27

    (39) SVar -> IDENTIFICADOR . DVar
    (85) SArr -> IDENTIFICADOR . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (48) DVar -> . ASIGNAR EVar
    (49) DVar -> . PUNTO_COMA

    CORCHETE_IZQ    shift and go to state 50
    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 35

state 28

    (76) SIfElse -> CONDICIONAL . PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse

    PAREN_IZQ       shift and go to state 51


state 29

    (108) SWhile -> BUCLE_MIENTRAS . PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_IZQ       shift and go to state 52


state 30

    (109) SDoWhile -> HACER . LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    LLAVE_IZQ       shift and go to state 53


state 31

    (110) SFor -> BUCLE_PARA . PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_IZQ       shift and go to state 54


state 32

    (82) SRet -> RETORNAR . ARet
    (83) ARet -> . SOpe PUNTO_COMA
    (84) ARet -> . CARACTER PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 57
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    ARet                           shift and go to state 55
    SOpe                           shift and go to state 56
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 33

    (118) SBreak -> ROMPER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 65


state 34

    (38) SVar -> STipos IDENTIFICADOR . FVar
    (53) FVar -> . AVar
    (54) FVar -> . PAREN_IZQ GVar
    (40) AVar -> . ASIGNAR BVar
    (41) AVar -> . COMA IDENTIFICADOR AVar
    (42) AVar -> . PUNTO_COMA

    PAREN_IZQ       shift and go to state 68
    ASIGNAR         shift and go to state 69
    COMA            shift and go to state 70
    PUNTO_COMA      shift and go to state 71

    FVar                           shift and go to state 66
    AVar                           shift and go to state 67

state 35

    (39) SVar -> IDENTIFICADOR DVar .

    IDENTIFICADOR   reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    ESTRUCTURA      reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_ENTERO     reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_CADENA     reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_LARGO      reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_VACIO      reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_CARACTER   reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_FLOTANTE   reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    TIPO_DOUBLE     reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    $end            reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    CONDICIONAL     reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    BUCLE_MIENTRAS  reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    HACER           reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    BUCLE_PARA      reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    RETORNAR        reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    ROMPER          reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)
    LLAVE_DER       reduce using rule 39 (SVar -> IDENTIFICADOR DVar .)


state 36

    (48) DVar -> ASIGNAR . EVar
    (50) EVar -> . SOpe PUNTO_COMA
    (51) EVar -> . CARACTER PUNTO_COMA
    (52) EVar -> . IDENTIFICADOR SFunc DVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 74
    IDENTIFICADOR   shift and go to state 75
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    EVar                           shift and go to state 72
    SOpe                           shift and go to state 73
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 37

    (49) DVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 49 (DVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 49 (DVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 49 (DVar -> PUNTO_COMA .)
    $end            reduce using rule 49 (DVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 49 (DVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 49 (DVar -> PUNTO_COMA .)
    HACER           reduce using rule 49 (DVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 49 (DVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 49 (DVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 49 (DVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 49 (DVar -> PUNTO_COMA .)


state 38

    (96) SStruct -> ESTRUCTURA AStruct .

    IDENTIFICADOR   reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    CONDICIONAL     reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    BUCLE_MIENTRAS  reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    HACER           reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    BUCLE_PARA      reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    RETORNAR        reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    ROMPER          reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_ENTERO     reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_CADENA     reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_LARGO      reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_VACIO      reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_CARACTER   reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_FLOTANTE   reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    TIPO_DOUBLE     reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)
    $end            reduce using rule 96 (SStruct -> ESTRUCTURA AStruct .)


state 39

    (97) AStruct -> IDENTIFICADOR . LLAVE_IZQ BStruct LLAVE_DER CStruct

    LLAVE_IZQ       shift and go to state 76


state 40

    (98) AStruct -> LLAVE_IZQ . BStruct LLAVE_DER DStruct
    (99) BStruct -> . empty
    (100) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 77
    empty                          shift and go to state 78
    STipos                         shift and go to state 79

state 41

    (5) SInst -> SVar SInst .

    $end            reduce using rule 5 (SInst -> SVar SInst .)
    LLAVE_DER       reduce using rule 5 (SInst -> SVar SInst .)


state 42

    (6) SInst -> SIfElse SInst .

    $end            reduce using rule 6 (SInst -> SIfElse SInst .)
    LLAVE_DER       reduce using rule 6 (SInst -> SIfElse SInst .)


state 43

    (7) SInst -> SWhile SInst .

    $end            reduce using rule 7 (SInst -> SWhile SInst .)
    LLAVE_DER       reduce using rule 7 (SInst -> SWhile SInst .)


state 44

    (8) SInst -> SDoWhile SInst .

    $end            reduce using rule 8 (SInst -> SDoWhile SInst .)
    LLAVE_DER       reduce using rule 8 (SInst -> SDoWhile SInst .)


state 45

    (9) SInst -> SFor SInst .

    $end            reduce using rule 9 (SInst -> SFor SInst .)
    LLAVE_DER       reduce using rule 9 (SInst -> SFor SInst .)


state 46

    (10) SInst -> SRet SInst .

    $end            reduce using rule 10 (SInst -> SRet SInst .)
    LLAVE_DER       reduce using rule 10 (SInst -> SRet SInst .)


state 47

    (11) SInst -> SArr SInst .

    $end            reduce using rule 11 (SInst -> SArr SInst .)
    LLAVE_DER       reduce using rule 11 (SInst -> SArr SInst .)


state 48

    (12) SInst -> SBreak SInst .

    $end            reduce using rule 12 (SInst -> SBreak SInst .)
    LLAVE_DER       reduce using rule 12 (SInst -> SBreak SInst .)


state 49

    (38) SVar -> STipos IDENTIFICADOR . FVar
    (86) SArr -> STipos IDENTIFICADOR . CORCHETE_IZQ AArr
    (53) FVar -> . AVar
    (54) FVar -> . PAREN_IZQ GVar
    (40) AVar -> . ASIGNAR BVar
    (41) AVar -> . COMA IDENTIFICADOR AVar
    (42) AVar -> . PUNTO_COMA

    CORCHETE_IZQ    shift and go to state 80
    PAREN_IZQ       shift and go to state 68
    ASIGNAR         shift and go to state 69
    COMA            shift and go to state 70
    PUNTO_COMA      shift and go to state 71

    FVar                           shift and go to state 66
    AVar                           shift and go to state 67

state 50

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA

    NUMERO_ENTERO   shift and go to state 81


state 51

    (76) SIfElse -> CONDICIONAL PAREN_IZQ . SOpe PAREN_DER LLAVE_IZQ AIfElse
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 82
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 52

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ . SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 83
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 53

    (109) SDoWhile -> HACER LLAVE_IZQ . SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 84
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 54

    (110) SFor -> BUCLE_PARA PAREN_IZQ . SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (112) SDecVarFor -> . STipos IDENTIFICADOR ADecVarFor
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SDecVarFor                     shift and go to state 85
    STipos                         shift and go to state 86

state 55

    (82) SRet -> RETORNAR ARet .

    IDENTIFICADOR   reduce using rule 82 (SRet -> RETORNAR ARet .)
    CONDICIONAL     reduce using rule 82 (SRet -> RETORNAR ARet .)
    BUCLE_MIENTRAS  reduce using rule 82 (SRet -> RETORNAR ARet .)
    HACER           reduce using rule 82 (SRet -> RETORNAR ARet .)
    BUCLE_PARA      reduce using rule 82 (SRet -> RETORNAR ARet .)
    RETORNAR        reduce using rule 82 (SRet -> RETORNAR ARet .)
    ROMPER          reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_ENTERO     reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_CADENA     reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_LARGO      reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_VACIO      reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_CARACTER   reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_FLOTANTE   reduce using rule 82 (SRet -> RETORNAR ARet .)
    TIPO_DOUBLE     reduce using rule 82 (SRet -> RETORNAR ARet .)
    $end            reduce using rule 82 (SRet -> RETORNAR ARet .)
    LLAVE_DER       reduce using rule 82 (SRet -> RETORNAR ARet .)


state 56

    (83) ARet -> SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 87


state 57

    (84) ARet -> CARACTER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 88


state 58

    (14) SOpe -> AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 89
    empty                          shift and go to state 95

state 59

    (21) AOpe -> COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 96
    empty                          shift and go to state 102

state 60

    (30) COpe -> PAREN_IZQ . SOpe PAREN_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 103
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 61

    (31) COpe -> EOpe .

    MULTIPLICAR     reduce using rule 31 (COpe -> EOpe .)
    DIVIDIR         reduce using rule 31 (COpe -> EOpe .)
    MODULO          reduce using rule 31 (COpe -> EOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 31 (COpe -> EOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 31 (COpe -> EOpe .)
    SUMAR           reduce using rule 31 (COpe -> EOpe .)
    RESTAR          reduce using rule 31 (COpe -> EOpe .)
    COMPARAR_IGUAL  reduce using rule 31 (COpe -> EOpe .)
    MAYOR_QUE       reduce using rule 31 (COpe -> EOpe .)
    MENOR_QUE       reduce using rule 31 (COpe -> EOpe .)
    PUNTO_COMA      reduce using rule 31 (COpe -> EOpe .)
    PAREN_DER       reduce using rule 31 (COpe -> EOpe .)
    COMA            reduce using rule 31 (COpe -> EOpe .)
    LLAVE_DER       reduce using rule 31 (COpe -> EOpe .)


state 62

    (32) COpe -> NUMERO_DECIMAL .

    MULTIPLICAR     reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    DIVIDIR         reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MODULO          reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    AND_LOGICO_CONDICIONAL reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    OR_LOGICO_CONDICIONAL reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    SUMAR           reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    RESTAR          reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    COMPARAR_IGUAL  reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MAYOR_QUE       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    MENOR_QUE       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    PUNTO_COMA      reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    PAREN_DER       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    COMA            reduce using rule 32 (COpe -> NUMERO_DECIMAL .)
    LLAVE_DER       reduce using rule 32 (COpe -> NUMERO_DECIMAL .)


state 63

    (33) COpe -> NUMERO_ENTERO .

    MULTIPLICAR     reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    DIVIDIR         reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MODULO          reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    AND_LOGICO_CONDICIONAL reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    OR_LOGICO_CONDICIONAL reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    SUMAR           reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    RESTAR          reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    COMPARAR_IGUAL  reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MAYOR_QUE       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    MENOR_QUE       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    PUNTO_COMA      reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    PAREN_DER       reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    COMA            reduce using rule 33 (COpe -> NUMERO_ENTERO .)
    LLAVE_DER       reduce using rule 33 (COpe -> NUMERO_ENTERO .)


state 64

    (34) EOpe -> IDENTIFICADOR . FOpe
    (35) FOpe -> . DOpe
    (36) FOpe -> . IDENTIFICADOR FOpe
    (37) FOpe -> . PUNTO FOpe
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    IDENTIFICADOR   shift and go to state 104
    PUNTO           shift and go to state 107
    CORCHETE_IZQ    shift and go to state 108
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    FOpe                           shift and go to state 105
    DOpe                           shift and go to state 106
    empty                          shift and go to state 109

state 65

    (118) SBreak -> ROMPER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    HACER           reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    RETORNAR        reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    ROMPER          reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    $end            reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 118 (SBreak -> ROMPER PUNTO_COMA .)


state 66

    (38) SVar -> STipos IDENTIFICADOR FVar .

    IDENTIFICADOR   reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    ESTRUCTURA      reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_ENTERO     reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_CADENA     reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_LARGO      reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_VACIO      reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_CARACTER   reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_FLOTANTE   reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    TIPO_DOUBLE     reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    $end            reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    CONDICIONAL     reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    BUCLE_MIENTRAS  reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    HACER           reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    BUCLE_PARA      reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    RETORNAR        reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    ROMPER          reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)
    LLAVE_DER       reduce using rule 38 (SVar -> STipos IDENTIFICADOR FVar .)


state 67

    (53) FVar -> AVar .

    IDENTIFICADOR   reduce using rule 53 (FVar -> AVar .)
    ESTRUCTURA      reduce using rule 53 (FVar -> AVar .)
    TIPO_ENTERO     reduce using rule 53 (FVar -> AVar .)
    TIPO_CADENA     reduce using rule 53 (FVar -> AVar .)
    TIPO_LARGO      reduce using rule 53 (FVar -> AVar .)
    TIPO_VACIO      reduce using rule 53 (FVar -> AVar .)
    TIPO_CARACTER   reduce using rule 53 (FVar -> AVar .)
    TIPO_FLOTANTE   reduce using rule 53 (FVar -> AVar .)
    TIPO_DOUBLE     reduce using rule 53 (FVar -> AVar .)
    $end            reduce using rule 53 (FVar -> AVar .)
    CONDICIONAL     reduce using rule 53 (FVar -> AVar .)
    BUCLE_MIENTRAS  reduce using rule 53 (FVar -> AVar .)
    HACER           reduce using rule 53 (FVar -> AVar .)
    BUCLE_PARA      reduce using rule 53 (FVar -> AVar .)
    RETORNAR        reduce using rule 53 (FVar -> AVar .)
    ROMPER          reduce using rule 53 (FVar -> AVar .)
    LLAVE_DER       reduce using rule 53 (FVar -> AVar .)


state 68

    (54) FVar -> PAREN_IZQ . GVar
    (55) GVar -> . STipos HVar
    (56) GVar -> . PAREN_DER JVar
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    PAREN_DER       shift and go to state 112
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    GVar                           shift and go to state 110
    STipos                         shift and go to state 111

state 69

    (40) AVar -> ASIGNAR . BVar
    (43) BVar -> . SOpe CVar
    (44) BVar -> . CARACTER CVar
    (45) BVar -> . IDENTIFICADOR SFunc AVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 115
    IDENTIFICADOR   shift and go to state 116
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BVar                           shift and go to state 113
    SOpe                           shift and go to state 114
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 70

    (41) AVar -> COMA . IDENTIFICADOR AVar

    IDENTIFICADOR   shift and go to state 117


state 71

    (42) AVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 42 (AVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 42 (AVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 42 (AVar -> PUNTO_COMA .)
    $end            reduce using rule 42 (AVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 42 (AVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 42 (AVar -> PUNTO_COMA .)
    HACER           reduce using rule 42 (AVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 42 (AVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 42 (AVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 42 (AVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 42 (AVar -> PUNTO_COMA .)


state 72

    (48) DVar -> ASIGNAR EVar .

    IDENTIFICADOR   reduce using rule 48 (DVar -> ASIGNAR EVar .)
    ESTRUCTURA      reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_ENTERO     reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_CADENA     reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_LARGO      reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_VACIO      reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_CARACTER   reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_FLOTANTE   reduce using rule 48 (DVar -> ASIGNAR EVar .)
    TIPO_DOUBLE     reduce using rule 48 (DVar -> ASIGNAR EVar .)
    $end            reduce using rule 48 (DVar -> ASIGNAR EVar .)
    CONDICIONAL     reduce using rule 48 (DVar -> ASIGNAR EVar .)
    BUCLE_MIENTRAS  reduce using rule 48 (DVar -> ASIGNAR EVar .)
    HACER           reduce using rule 48 (DVar -> ASIGNAR EVar .)
    BUCLE_PARA      reduce using rule 48 (DVar -> ASIGNAR EVar .)
    RETORNAR        reduce using rule 48 (DVar -> ASIGNAR EVar .)
    ROMPER          reduce using rule 48 (DVar -> ASIGNAR EVar .)
    LLAVE_DER       reduce using rule 48 (DVar -> ASIGNAR EVar .)


state 73

    (50) EVar -> SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 118


state 74

    (51) EVar -> CARACTER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 119


state 75

    (52) EVar -> IDENTIFICADOR . SFunc DVar
    (34) EOpe -> IDENTIFICADOR . FOpe
    (70) SFunc -> . PAREN_IZQ AFunc
    (71) SFunc -> . empty
    (35) FOpe -> . DOpe
    (36) FOpe -> . IDENTIFICADOR FOpe
    (37) FOpe -> . PUNTO FOpe
    (4) empty -> .
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty

    PAREN_IZQ       shift and go to state 121
    IDENTIFICADOR   shift and go to state 104
    PUNTO           shift and go to state 107
    ASIGNAR         reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    CORCHETE_IZQ    shift and go to state 108

    SFunc                          shift and go to state 120
    FOpe                           shift and go to state 105
    empty                          shift and go to state 122
    DOpe                           shift and go to state 106

state 76

    (97) AStruct -> IDENTIFICADOR LLAVE_IZQ . BStruct LLAVE_DER CStruct
    (99) BStruct -> . empty
    (100) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 123
    empty                          shift and go to state 78
    STipos                         shift and go to state 79

state 77

    (98) AStruct -> LLAVE_IZQ BStruct . LLAVE_DER DStruct

    LLAVE_DER       shift and go to state 124


state 78

    (99) BStruct -> empty .

    LLAVE_DER       reduce using rule 99 (BStruct -> empty .)


state 79

    (100) BStruct -> STipos . IDENTIFICADOR FStruct

    IDENTIFICADOR   shift and go to state 125


state 80

    (86) SArr -> STipos IDENTIFICADOR CORCHETE_IZQ . AArr
    (87) AArr -> . NUMERO_ENTERO CORCHETE_DER BArr
    (88) AArr -> . CORCHETE_DER CArr

    NUMERO_ENTERO   shift and go to state 127
    CORCHETE_DER    shift and go to state 128

    AArr                           shift and go to state 126

state 81

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER ASIGNAR SOpe PUNTO_COMA

    CORCHETE_DER    shift and go to state 129


state 82

    (76) SIfElse -> CONDICIONAL PAREN_IZQ SOpe . PAREN_DER LLAVE_IZQ AIfElse

    PAREN_DER       shift and go to state 130


state 83

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe . PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_DER       shift and go to state 131


state 84

    (109) SDoWhile -> HACER LLAVE_IZQ SInst . LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    LLAVE_DER       shift and go to state 132


state 85

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor . PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 133


state 86

    (112) SDecVarFor -> STipos . IDENTIFICADOR ADecVarFor

    IDENTIFICADOR   shift and go to state 134


state 87

    (83) ARet -> SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    HACER           reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    $end            reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 83 (ARet -> SOpe PUNTO_COMA .)


state 88

    (84) ARet -> CARACTER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    HACER           reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    RETORNAR        reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    ROMPER          reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    $end            reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 84 (ARet -> CARACTER PUNTO_COMA .)


state 89

    (14) SOpe -> AOpe ZOpe .

    PUNTO_COMA      reduce using rule 14 (SOpe -> AOpe ZOpe .)
    PAREN_DER       reduce using rule 14 (SOpe -> AOpe ZOpe .)
    COMA            reduce using rule 14 (SOpe -> AOpe ZOpe .)
    LLAVE_DER       reduce using rule 14 (SOpe -> AOpe ZOpe .)


state 90

    (15) ZOpe -> SUMAR . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    AOpe                           shift and go to state 135
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 91

    (16) ZOpe -> RESTAR . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    AOpe                           shift and go to state 136
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 92

    (17) ZOpe -> COMPARAR_IGUAL . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    AOpe                           shift and go to state 137
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 93

    (18) ZOpe -> MAYOR_QUE . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    AOpe                           shift and go to state 138
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 94

    (19) ZOpe -> MENOR_QUE . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    AOpe                           shift and go to state 139
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 95

    (20) ZOpe -> empty .

    PUNTO_COMA      reduce using rule 20 (ZOpe -> empty .)
    PAREN_DER       reduce using rule 20 (ZOpe -> empty .)
    COMA            reduce using rule 20 (ZOpe -> empty .)
    LLAVE_DER       reduce using rule 20 (ZOpe -> empty .)


state 96

    (21) AOpe -> COpe BOpe .

    SUMAR           reduce using rule 21 (AOpe -> COpe BOpe .)
    RESTAR          reduce using rule 21 (AOpe -> COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 21 (AOpe -> COpe BOpe .)
    MAYOR_QUE       reduce using rule 21 (AOpe -> COpe BOpe .)
    MENOR_QUE       reduce using rule 21 (AOpe -> COpe BOpe .)
    PUNTO_COMA      reduce using rule 21 (AOpe -> COpe BOpe .)
    PAREN_DER       reduce using rule 21 (AOpe -> COpe BOpe .)
    COMA            reduce using rule 21 (AOpe -> COpe BOpe .)
    LLAVE_DER       reduce using rule 21 (AOpe -> COpe BOpe .)


state 97

    (22) BOpe -> MULTIPLICAR . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    COpe                           shift and go to state 140
    EOpe                           shift and go to state 61

state 98

    (23) BOpe -> DIVIDIR . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    COpe                           shift and go to state 141
    EOpe                           shift and go to state 61

state 99

    (24) BOpe -> MODULO . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    COpe                           shift and go to state 142
    EOpe                           shift and go to state 61

state 100

    (25) BOpe -> AND_LOGICO_CONDICIONAL . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    COpe                           shift and go to state 143
    EOpe                           shift and go to state 61

state 101

    (26) BOpe -> OR_LOGICO_CONDICIONAL . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    COpe                           shift and go to state 144
    EOpe                           shift and go to state 61

state 102

    (27) BOpe -> empty .

    SUMAR           reduce using rule 27 (BOpe -> empty .)
    RESTAR          reduce using rule 27 (BOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 27 (BOpe -> empty .)
    MAYOR_QUE       reduce using rule 27 (BOpe -> empty .)
    MENOR_QUE       reduce using rule 27 (BOpe -> empty .)
    PUNTO_COMA      reduce using rule 27 (BOpe -> empty .)
    PAREN_DER       reduce using rule 27 (BOpe -> empty .)
    COMA            reduce using rule 27 (BOpe -> empty .)
    LLAVE_DER       reduce using rule 27 (BOpe -> empty .)


state 103

    (30) COpe -> PAREN_IZQ SOpe . PAREN_DER

    PAREN_DER       shift and go to state 145


state 104

    (36) FOpe -> IDENTIFICADOR . FOpe
    (35) FOpe -> . DOpe
    (36) FOpe -> . IDENTIFICADOR FOpe
    (37) FOpe -> . PUNTO FOpe
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    IDENTIFICADOR   shift and go to state 104
    PUNTO           shift and go to state 107
    CORCHETE_IZQ    shift and go to state 108
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    FOpe                           shift and go to state 146
    DOpe                           shift and go to state 106
    empty                          shift and go to state 109

state 105

    (34) EOpe -> IDENTIFICADOR FOpe .

    MULTIPLICAR     reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    DIVIDIR         reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    MODULO          reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    SUMAR           reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    RESTAR          reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    COMPARAR_IGUAL  reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    MAYOR_QUE       reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    MENOR_QUE       reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    PUNTO_COMA      reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    PAREN_DER       reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    COMA            reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)
    LLAVE_DER       reduce using rule 34 (EOpe -> IDENTIFICADOR FOpe .)


state 106

    (35) FOpe -> DOpe .

    MULTIPLICAR     reduce using rule 35 (FOpe -> DOpe .)
    DIVIDIR         reduce using rule 35 (FOpe -> DOpe .)
    MODULO          reduce using rule 35 (FOpe -> DOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 35 (FOpe -> DOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 35 (FOpe -> DOpe .)
    SUMAR           reduce using rule 35 (FOpe -> DOpe .)
    RESTAR          reduce using rule 35 (FOpe -> DOpe .)
    COMPARAR_IGUAL  reduce using rule 35 (FOpe -> DOpe .)
    MAYOR_QUE       reduce using rule 35 (FOpe -> DOpe .)
    MENOR_QUE       reduce using rule 35 (FOpe -> DOpe .)
    PUNTO_COMA      reduce using rule 35 (FOpe -> DOpe .)
    PAREN_DER       reduce using rule 35 (FOpe -> DOpe .)
    COMA            reduce using rule 35 (FOpe -> DOpe .)
    LLAVE_DER       reduce using rule 35 (FOpe -> DOpe .)


state 107

    (37) FOpe -> PUNTO . FOpe
    (35) FOpe -> . DOpe
    (36) FOpe -> . IDENTIFICADOR FOpe
    (37) FOpe -> . PUNTO FOpe
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty
    (4) empty -> .

    IDENTIFICADOR   shift and go to state 104
    PUNTO           shift and go to state 107
    CORCHETE_IZQ    shift and go to state 108
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    FOpe                           shift and go to state 147
    DOpe                           shift and go to state 106
    empty                          shift and go to state 109

state 108

    (28) DOpe -> CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER

    NUMERO_ENTERO   shift and go to state 148


state 109

    (29) DOpe -> empty .

    MULTIPLICAR     reduce using rule 29 (DOpe -> empty .)
    DIVIDIR         reduce using rule 29 (DOpe -> empty .)
    MODULO          reduce using rule 29 (DOpe -> empty .)
    AND_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    OR_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    SUMAR           reduce using rule 29 (DOpe -> empty .)
    RESTAR          reduce using rule 29 (DOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 29 (DOpe -> empty .)
    MAYOR_QUE       reduce using rule 29 (DOpe -> empty .)
    MENOR_QUE       reduce using rule 29 (DOpe -> empty .)
    PUNTO_COMA      reduce using rule 29 (DOpe -> empty .)
    PAREN_DER       reduce using rule 29 (DOpe -> empty .)
    COMA            reduce using rule 29 (DOpe -> empty .)
    LLAVE_DER       reduce using rule 29 (DOpe -> empty .)


state 110

    (54) FVar -> PAREN_IZQ GVar .

    IDENTIFICADOR   reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    ESTRUCTURA      reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_ENTERO     reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_CADENA     reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_LARGO      reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_VACIO      reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_CARACTER   reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_FLOTANTE   reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    TIPO_DOUBLE     reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    $end            reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    CONDICIONAL     reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    BUCLE_MIENTRAS  reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    HACER           reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    BUCLE_PARA      reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    RETORNAR        reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    ROMPER          reduce using rule 54 (FVar -> PAREN_IZQ GVar .)
    LLAVE_DER       reduce using rule 54 (FVar -> PAREN_IZQ GVar .)


state 111

    (55) GVar -> STipos . HVar
    (57) HVar -> . IDENTIFICADOR IVar
    (58) HVar -> . IVar
    (59) IVar -> . COMA GVar
    (60) IVar -> . PAREN_DER JVar

    IDENTIFICADOR   shift and go to state 150
    COMA            shift and go to state 152
    PAREN_DER       shift and go to state 153

    HVar                           shift and go to state 149
    IVar                           shift and go to state 151

state 112

    (56) GVar -> PAREN_DER . JVar
    (61) JVar -> . PUNTO_COMA
    (62) JVar -> . LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 155
    LLAVE_IZQ       shift and go to state 156

    JVar                           shift and go to state 154

state 113

    (40) AVar -> ASIGNAR BVar .

    IDENTIFICADOR   reduce using rule 40 (AVar -> ASIGNAR BVar .)
    ESTRUCTURA      reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_ENTERO     reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_CADENA     reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_LARGO      reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_VACIO      reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_CARACTER   reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_FLOTANTE   reduce using rule 40 (AVar -> ASIGNAR BVar .)
    TIPO_DOUBLE     reduce using rule 40 (AVar -> ASIGNAR BVar .)
    $end            reduce using rule 40 (AVar -> ASIGNAR BVar .)
    CONDICIONAL     reduce using rule 40 (AVar -> ASIGNAR BVar .)
    BUCLE_MIENTRAS  reduce using rule 40 (AVar -> ASIGNAR BVar .)
    HACER           reduce using rule 40 (AVar -> ASIGNAR BVar .)
    BUCLE_PARA      reduce using rule 40 (AVar -> ASIGNAR BVar .)
    RETORNAR        reduce using rule 40 (AVar -> ASIGNAR BVar .)
    ROMPER          reduce using rule 40 (AVar -> ASIGNAR BVar .)
    LLAVE_DER       reduce using rule 40 (AVar -> ASIGNAR BVar .)


state 114

    (43) BVar -> SOpe . CVar
    (46) CVar -> . PUNTO_COMA
    (47) CVar -> . COMA BVar

    PUNTO_COMA      shift and go to state 158
    COMA            shift and go to state 159

    CVar                           shift and go to state 157

state 115

    (44) BVar -> CARACTER . CVar
    (46) CVar -> . PUNTO_COMA
    (47) CVar -> . COMA BVar

    PUNTO_COMA      shift and go to state 158
    COMA            shift and go to state 159

    CVar                           shift and go to state 160

state 116

    (45) BVar -> IDENTIFICADOR . SFunc AVar
    (34) EOpe -> IDENTIFICADOR . FOpe
    (70) SFunc -> . PAREN_IZQ AFunc
    (71) SFunc -> . empty
    (35) FOpe -> . DOpe
    (36) FOpe -> . IDENTIFICADOR FOpe
    (37) FOpe -> . PUNTO FOpe
    (4) empty -> .
    (28) DOpe -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER
    (29) DOpe -> . empty

    PAREN_IZQ       shift and go to state 121
    IDENTIFICADOR   shift and go to state 104
    PUNTO           shift and go to state 107
    ASIGNAR         reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    MULTIPLICAR     reduce using rule 4 (empty -> .)
    DIVIDIR         reduce using rule 4 (empty -> .)
    MODULO          reduce using rule 4 (empty -> .)
    AND_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    OR_LOGICO_CONDICIONAL reduce using rule 4 (empty -> .)
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    CORCHETE_IZQ    shift and go to state 108

    SFunc                          shift and go to state 161
    FOpe                           shift and go to state 105
    empty                          shift and go to state 122
    DOpe                           shift and go to state 106

state 117

    (41) AVar -> COMA IDENTIFICADOR . AVar
    (40) AVar -> . ASIGNAR BVar
    (41) AVar -> . COMA IDENTIFICADOR AVar
    (42) AVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 69
    COMA            shift and go to state 70
    PUNTO_COMA      shift and go to state 71

    AVar                           shift and go to state 162

state 118

    (50) EVar -> SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    $end            reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    HACER           reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 50 (EVar -> SOpe PUNTO_COMA .)


state 119

    (51) EVar -> CARACTER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    $end            reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    HACER           reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    RETORNAR        reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    ROMPER          reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 51 (EVar -> CARACTER PUNTO_COMA .)


state 120

    (52) EVar -> IDENTIFICADOR SFunc . DVar
    (48) DVar -> . ASIGNAR EVar
    (49) DVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 36
    PUNTO_COMA      shift and go to state 37

    DVar                           shift and go to state 163

state 121

    (70) SFunc -> PAREN_IZQ . AFunc
    (72) AFunc -> . PAREN_DER
    (73) AFunc -> . IDENTIFICADOR BFunc

    PAREN_DER       shift and go to state 165
    IDENTIFICADOR   shift and go to state 166

    AFunc                          shift and go to state 164

state 122

    (71) SFunc -> empty .
    (29) DOpe -> empty .

  ! reduce/reduce conflict for PUNTO_COMA resolved using rule 29 (DOpe -> empty .)
  ! reduce/reduce conflict for COMA resolved using rule 29 (DOpe -> empty .)
    ASIGNAR         reduce using rule 71 (SFunc -> empty .)
    MULTIPLICAR     reduce using rule 29 (DOpe -> empty .)
    DIVIDIR         reduce using rule 29 (DOpe -> empty .)
    MODULO          reduce using rule 29 (DOpe -> empty .)
    AND_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    OR_LOGICO_CONDICIONAL reduce using rule 29 (DOpe -> empty .)
    SUMAR           reduce using rule 29 (DOpe -> empty .)
    RESTAR          reduce using rule 29 (DOpe -> empty .)
    COMPARAR_IGUAL  reduce using rule 29 (DOpe -> empty .)
    MAYOR_QUE       reduce using rule 29 (DOpe -> empty .)
    MENOR_QUE       reduce using rule 29 (DOpe -> empty .)
    PUNTO_COMA      reduce using rule 29 (DOpe -> empty .)
    COMA            reduce using rule 29 (DOpe -> empty .)

  ! PUNTO_COMA      [ reduce using rule 71 (SFunc -> empty .) ]
  ! COMA            [ reduce using rule 71 (SFunc -> empty .) ]


state 123

    (97) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct . LLAVE_DER CStruct

    LLAVE_DER       shift and go to state 167


state 124

    (98) AStruct -> LLAVE_IZQ BStruct LLAVE_DER . DStruct
    (103) DStruct -> . IDENTIFICADOR EStruct

    IDENTIFICADOR   shift and go to state 169

    DStruct                        shift and go to state 168

state 125

    (100) BStruct -> STipos IDENTIFICADOR . FStruct
    (106) FStruct -> . PUNTO_COMA BStruct
    (107) FStruct -> . CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct

    PUNTO_COMA      shift and go to state 171
    CORCHETE_IZQ    shift and go to state 172

    FStruct                        shift and go to state 170

state 126

    (86) SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .

    IDENTIFICADOR   reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    CONDICIONAL     reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    BUCLE_MIENTRAS  reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    HACER           reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    BUCLE_PARA      reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    RETORNAR        reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    ROMPER          reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_ENTERO     reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_CADENA     reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_LARGO      reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_VACIO      reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_CARACTER   reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_FLOTANTE   reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    TIPO_DOUBLE     reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    $end            reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)
    LLAVE_DER       reduce using rule 86 (SArr -> STipos IDENTIFICADOR CORCHETE_IZQ AArr .)


state 127

    (87) AArr -> NUMERO_ENTERO . CORCHETE_DER BArr

    CORCHETE_DER    shift and go to state 173


state 128

    (88) AArr -> CORCHETE_DER . CArr
    (91) CArr -> . ASIGNAR LLAVE_IZQ DArr

    ASIGNAR         shift and go to state 175

    CArr                           shift and go to state 174

state 129

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER . ASIGNAR SOpe PUNTO_COMA

    ASIGNAR         shift and go to state 176


state 130

    (76) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER . LLAVE_IZQ AIfElse

    LLAVE_IZQ       shift and go to state 177


state 131

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER . LLAVE_IZQ SInst LLAVE_DER

    LLAVE_IZQ       shift and go to state 178


state 132

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    BUCLE_MIENTRAS  shift and go to state 179


state 133

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA . SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 180
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 134

    (112) SDecVarFor -> STipos IDENTIFICADOR . ADecVarFor
    (113) ADecVarFor -> . ASIGNAR BDecVarFor
    (114) ADecVarFor -> . COMA BDecVarFor

    ASIGNAR         shift and go to state 182
    COMA            shift and go to state 183

    ADecVarFor                     shift and go to state 181

state 135

    (15) ZOpe -> SUMAR AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 184
    empty                          shift and go to state 95

state 136

    (16) ZOpe -> RESTAR AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 185
    empty                          shift and go to state 95

state 137

    (17) ZOpe -> COMPARAR_IGUAL AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 186
    empty                          shift and go to state 95

state 138

    (18) ZOpe -> MAYOR_QUE AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 187
    empty                          shift and go to state 95

state 139

    (19) ZOpe -> MENOR_QUE AOpe . ZOpe
    (15) ZOpe -> . SUMAR AOpe ZOpe
    (16) ZOpe -> . RESTAR AOpe ZOpe
    (17) ZOpe -> . COMPARAR_IGUAL AOpe ZOpe
    (18) ZOpe -> . MAYOR_QUE AOpe ZOpe
    (19) ZOpe -> . MENOR_QUE AOpe ZOpe
    (20) ZOpe -> . empty
    (4) empty -> .

    SUMAR           shift and go to state 90
    RESTAR          shift and go to state 91
    COMPARAR_IGUAL  shift and go to state 92
    MAYOR_QUE       shift and go to state 93
    MENOR_QUE       shift and go to state 94
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    ZOpe                           shift and go to state 188
    empty                          shift and go to state 95

state 140

    (22) BOpe -> MULTIPLICAR COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 189
    empty                          shift and go to state 102

state 141

    (23) BOpe -> DIVIDIR COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 190
    empty                          shift and go to state 102

state 142

    (24) BOpe -> MODULO COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 191
    empty                          shift and go to state 102

state 143

    (25) BOpe -> AND_LOGICO_CONDICIONAL COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 192
    empty                          shift and go to state 102

state 144

    (26) BOpe -> OR_LOGICO_CONDICIONAL COpe . BOpe
    (22) BOpe -> . MULTIPLICAR COpe BOpe
    (23) BOpe -> . DIVIDIR COpe BOpe
    (24) BOpe -> . MODULO COpe BOpe
    (25) BOpe -> . AND_LOGICO_CONDICIONAL COpe BOpe
    (26) BOpe -> . OR_LOGICO_CONDICIONAL COpe BOpe
    (27) BOpe -> . empty
    (4) empty -> .

    MULTIPLICAR     shift and go to state 97
    DIVIDIR         shift and go to state 98
    MODULO          shift and go to state 99
    AND_LOGICO_CONDICIONAL shift and go to state 100
    OR_LOGICO_CONDICIONAL shift and go to state 101
    SUMAR           reduce using rule 4 (empty -> .)
    RESTAR          reduce using rule 4 (empty -> .)
    COMPARAR_IGUAL  reduce using rule 4 (empty -> .)
    MAYOR_QUE       reduce using rule 4 (empty -> .)
    MENOR_QUE       reduce using rule 4 (empty -> .)
    PUNTO_COMA      reduce using rule 4 (empty -> .)
    PAREN_DER       reduce using rule 4 (empty -> .)
    COMA            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BOpe                           shift and go to state 193
    empty                          shift and go to state 102

state 145

    (30) COpe -> PAREN_IZQ SOpe PAREN_DER .

    MULTIPLICAR     reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    DIVIDIR         reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MODULO          reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    AND_LOGICO_CONDICIONAL reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    OR_LOGICO_CONDICIONAL reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    SUMAR           reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    RESTAR          reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    COMPARAR_IGUAL  reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MAYOR_QUE       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    MENOR_QUE       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    PUNTO_COMA      reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    PAREN_DER       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    COMA            reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)
    LLAVE_DER       reduce using rule 30 (COpe -> PAREN_IZQ SOpe PAREN_DER .)


state 146

    (36) FOpe -> IDENTIFICADOR FOpe .

    MULTIPLICAR     reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    DIVIDIR         reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    MODULO          reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    SUMAR           reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    RESTAR          reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    COMPARAR_IGUAL  reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    MAYOR_QUE       reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    MENOR_QUE       reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    PUNTO_COMA      reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    PAREN_DER       reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    COMA            reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)
    LLAVE_DER       reduce using rule 36 (FOpe -> IDENTIFICADOR FOpe .)


state 147

    (37) FOpe -> PUNTO FOpe .

    MULTIPLICAR     reduce using rule 37 (FOpe -> PUNTO FOpe .)
    DIVIDIR         reduce using rule 37 (FOpe -> PUNTO FOpe .)
    MODULO          reduce using rule 37 (FOpe -> PUNTO FOpe .)
    AND_LOGICO_CONDICIONAL reduce using rule 37 (FOpe -> PUNTO FOpe .)
    OR_LOGICO_CONDICIONAL reduce using rule 37 (FOpe -> PUNTO FOpe .)
    SUMAR           reduce using rule 37 (FOpe -> PUNTO FOpe .)
    RESTAR          reduce using rule 37 (FOpe -> PUNTO FOpe .)
    COMPARAR_IGUAL  reduce using rule 37 (FOpe -> PUNTO FOpe .)
    MAYOR_QUE       reduce using rule 37 (FOpe -> PUNTO FOpe .)
    MENOR_QUE       reduce using rule 37 (FOpe -> PUNTO FOpe .)
    PUNTO_COMA      reduce using rule 37 (FOpe -> PUNTO FOpe .)
    PAREN_DER       reduce using rule 37 (FOpe -> PUNTO FOpe .)
    COMA            reduce using rule 37 (FOpe -> PUNTO FOpe .)
    LLAVE_DER       reduce using rule 37 (FOpe -> PUNTO FOpe .)


state 148

    (28) DOpe -> CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER

    CORCHETE_DER    shift and go to state 194


state 149

    (55) GVar -> STipos HVar .

    IDENTIFICADOR   reduce using rule 55 (GVar -> STipos HVar .)
    ESTRUCTURA      reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_ENTERO     reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_CADENA     reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_LARGO      reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_VACIO      reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_CARACTER   reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_FLOTANTE   reduce using rule 55 (GVar -> STipos HVar .)
    TIPO_DOUBLE     reduce using rule 55 (GVar -> STipos HVar .)
    $end            reduce using rule 55 (GVar -> STipos HVar .)
    CONDICIONAL     reduce using rule 55 (GVar -> STipos HVar .)
    BUCLE_MIENTRAS  reduce using rule 55 (GVar -> STipos HVar .)
    HACER           reduce using rule 55 (GVar -> STipos HVar .)
    BUCLE_PARA      reduce using rule 55 (GVar -> STipos HVar .)
    RETORNAR        reduce using rule 55 (GVar -> STipos HVar .)
    ROMPER          reduce using rule 55 (GVar -> STipos HVar .)
    LLAVE_DER       reduce using rule 55 (GVar -> STipos HVar .)


state 150

    (57) HVar -> IDENTIFICADOR . IVar
    (59) IVar -> . COMA GVar
    (60) IVar -> . PAREN_DER JVar

    COMA            shift and go to state 152
    PAREN_DER       shift and go to state 153

    IVar                           shift and go to state 195

state 151

    (58) HVar -> IVar .

    IDENTIFICADOR   reduce using rule 58 (HVar -> IVar .)
    ESTRUCTURA      reduce using rule 58 (HVar -> IVar .)
    TIPO_ENTERO     reduce using rule 58 (HVar -> IVar .)
    TIPO_CADENA     reduce using rule 58 (HVar -> IVar .)
    TIPO_LARGO      reduce using rule 58 (HVar -> IVar .)
    TIPO_VACIO      reduce using rule 58 (HVar -> IVar .)
    TIPO_CARACTER   reduce using rule 58 (HVar -> IVar .)
    TIPO_FLOTANTE   reduce using rule 58 (HVar -> IVar .)
    TIPO_DOUBLE     reduce using rule 58 (HVar -> IVar .)
    $end            reduce using rule 58 (HVar -> IVar .)
    CONDICIONAL     reduce using rule 58 (HVar -> IVar .)
    BUCLE_MIENTRAS  reduce using rule 58 (HVar -> IVar .)
    HACER           reduce using rule 58 (HVar -> IVar .)
    BUCLE_PARA      reduce using rule 58 (HVar -> IVar .)
    RETORNAR        reduce using rule 58 (HVar -> IVar .)
    ROMPER          reduce using rule 58 (HVar -> IVar .)
    LLAVE_DER       reduce using rule 58 (HVar -> IVar .)


state 152

    (59) IVar -> COMA . GVar
    (55) GVar -> . STipos HVar
    (56) GVar -> . PAREN_DER JVar
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    PAREN_DER       shift and go to state 112
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    GVar                           shift and go to state 196
    STipos                         shift and go to state 111

state 153

    (60) IVar -> PAREN_DER . JVar
    (61) JVar -> . PUNTO_COMA
    (62) JVar -> . LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 155
    LLAVE_IZQ       shift and go to state 156

    JVar                           shift and go to state 197

state 154

    (56) GVar -> PAREN_DER JVar .

    IDENTIFICADOR   reduce using rule 56 (GVar -> PAREN_DER JVar .)
    ESTRUCTURA      reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_ENTERO     reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_CADENA     reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_LARGO      reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_VACIO      reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_CARACTER   reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_FLOTANTE   reduce using rule 56 (GVar -> PAREN_DER JVar .)
    TIPO_DOUBLE     reduce using rule 56 (GVar -> PAREN_DER JVar .)
    $end            reduce using rule 56 (GVar -> PAREN_DER JVar .)
    CONDICIONAL     reduce using rule 56 (GVar -> PAREN_DER JVar .)
    BUCLE_MIENTRAS  reduce using rule 56 (GVar -> PAREN_DER JVar .)
    HACER           reduce using rule 56 (GVar -> PAREN_DER JVar .)
    BUCLE_PARA      reduce using rule 56 (GVar -> PAREN_DER JVar .)
    RETORNAR        reduce using rule 56 (GVar -> PAREN_DER JVar .)
    ROMPER          reduce using rule 56 (GVar -> PAREN_DER JVar .)
    LLAVE_DER       reduce using rule 56 (GVar -> PAREN_DER JVar .)


state 155

    (61) JVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 61 (JVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 61 (JVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 61 (JVar -> PUNTO_COMA .)
    $end            reduce using rule 61 (JVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 61 (JVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 61 (JVar -> PUNTO_COMA .)
    HACER           reduce using rule 61 (JVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 61 (JVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 61 (JVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 61 (JVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 61 (JVar -> PUNTO_COMA .)


state 156

    (62) JVar -> LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 198
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 157

    (43) BVar -> SOpe CVar .

    IDENTIFICADOR   reduce using rule 43 (BVar -> SOpe CVar .)
    ESTRUCTURA      reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_ENTERO     reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_CADENA     reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_LARGO      reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_VACIO      reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_CARACTER   reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_FLOTANTE   reduce using rule 43 (BVar -> SOpe CVar .)
    TIPO_DOUBLE     reduce using rule 43 (BVar -> SOpe CVar .)
    $end            reduce using rule 43 (BVar -> SOpe CVar .)
    CONDICIONAL     reduce using rule 43 (BVar -> SOpe CVar .)
    BUCLE_MIENTRAS  reduce using rule 43 (BVar -> SOpe CVar .)
    HACER           reduce using rule 43 (BVar -> SOpe CVar .)
    BUCLE_PARA      reduce using rule 43 (BVar -> SOpe CVar .)
    RETORNAR        reduce using rule 43 (BVar -> SOpe CVar .)
    ROMPER          reduce using rule 43 (BVar -> SOpe CVar .)
    LLAVE_DER       reduce using rule 43 (BVar -> SOpe CVar .)


state 158

    (46) CVar -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 46 (CVar -> PUNTO_COMA .)
    ESTRUCTURA      reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 46 (CVar -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 46 (CVar -> PUNTO_COMA .)
    $end            reduce using rule 46 (CVar -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 46 (CVar -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 46 (CVar -> PUNTO_COMA .)
    HACER           reduce using rule 46 (CVar -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 46 (CVar -> PUNTO_COMA .)
    RETORNAR        reduce using rule 46 (CVar -> PUNTO_COMA .)
    ROMPER          reduce using rule 46 (CVar -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 46 (CVar -> PUNTO_COMA .)


state 159

    (47) CVar -> COMA . BVar
    (43) BVar -> . SOpe CVar
    (44) BVar -> . CARACTER CVar
    (45) BVar -> . IDENTIFICADOR SFunc AVar
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 115
    IDENTIFICADOR   shift and go to state 116
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63

    BVar                           shift and go to state 199
    SOpe                           shift and go to state 114
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 160

    (44) BVar -> CARACTER CVar .

    IDENTIFICADOR   reduce using rule 44 (BVar -> CARACTER CVar .)
    ESTRUCTURA      reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_ENTERO     reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_CADENA     reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_LARGO      reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_VACIO      reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_CARACTER   reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_FLOTANTE   reduce using rule 44 (BVar -> CARACTER CVar .)
    TIPO_DOUBLE     reduce using rule 44 (BVar -> CARACTER CVar .)
    $end            reduce using rule 44 (BVar -> CARACTER CVar .)
    CONDICIONAL     reduce using rule 44 (BVar -> CARACTER CVar .)
    BUCLE_MIENTRAS  reduce using rule 44 (BVar -> CARACTER CVar .)
    HACER           reduce using rule 44 (BVar -> CARACTER CVar .)
    BUCLE_PARA      reduce using rule 44 (BVar -> CARACTER CVar .)
    RETORNAR        reduce using rule 44 (BVar -> CARACTER CVar .)
    ROMPER          reduce using rule 44 (BVar -> CARACTER CVar .)
    LLAVE_DER       reduce using rule 44 (BVar -> CARACTER CVar .)


state 161

    (45) BVar -> IDENTIFICADOR SFunc . AVar
    (40) AVar -> . ASIGNAR BVar
    (41) AVar -> . COMA IDENTIFICADOR AVar
    (42) AVar -> . PUNTO_COMA

    ASIGNAR         shift and go to state 69
    COMA            shift and go to state 70
    PUNTO_COMA      shift and go to state 71

    AVar                           shift and go to state 200

state 162

    (41) AVar -> COMA IDENTIFICADOR AVar .

    IDENTIFICADOR   reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    ESTRUCTURA      reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_ENTERO     reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_CADENA     reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_LARGO      reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_VACIO      reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_CARACTER   reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_FLOTANTE   reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    TIPO_DOUBLE     reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    $end            reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    CONDICIONAL     reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    BUCLE_MIENTRAS  reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    HACER           reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    BUCLE_PARA      reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    RETORNAR        reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    ROMPER          reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)
    LLAVE_DER       reduce using rule 41 (AVar -> COMA IDENTIFICADOR AVar .)


state 163

    (52) EVar -> IDENTIFICADOR SFunc DVar .

    IDENTIFICADOR   reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    ESTRUCTURA      reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_ENTERO     reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_CADENA     reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_LARGO      reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_VACIO      reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_CARACTER   reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_FLOTANTE   reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    TIPO_DOUBLE     reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    $end            reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    CONDICIONAL     reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    BUCLE_MIENTRAS  reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    HACER           reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    BUCLE_PARA      reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    RETORNAR        reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    ROMPER          reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)
    LLAVE_DER       reduce using rule 52 (EVar -> IDENTIFICADOR SFunc DVar .)


state 164

    (70) SFunc -> PAREN_IZQ AFunc .

    ASIGNAR         reduce using rule 70 (SFunc -> PAREN_IZQ AFunc .)
    PUNTO_COMA      reduce using rule 70 (SFunc -> PAREN_IZQ AFunc .)
    COMA            reduce using rule 70 (SFunc -> PAREN_IZQ AFunc .)


state 165

    (72) AFunc -> PAREN_DER .

    ASIGNAR         reduce using rule 72 (AFunc -> PAREN_DER .)
    PUNTO_COMA      reduce using rule 72 (AFunc -> PAREN_DER .)
    COMA            reduce using rule 72 (AFunc -> PAREN_DER .)


state 166

    (73) AFunc -> IDENTIFICADOR . BFunc
    (74) BFunc -> . COMA IDENTIFICADOR BFunc
    (75) BFunc -> . PAREN_DER

    COMA            shift and go to state 202
    PAREN_DER       shift and go to state 203

    BFunc                          shift and go to state 201

state 167

    (97) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER . CStruct
    (101) CStruct -> . PUNTO_COMA
    (102) CStruct -> . DStruct
    (103) DStruct -> . IDENTIFICADOR EStruct

    PUNTO_COMA      shift and go to state 205
    IDENTIFICADOR   shift and go to state 169

    CStruct                        shift and go to state 204
    DStruct                        shift and go to state 206

state 168

    (98) AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .

    IDENTIFICADOR   reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    CONDICIONAL     reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    BUCLE_MIENTRAS  reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    HACER           reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    BUCLE_PARA      reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    RETORNAR        reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    ROMPER          reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_ENTERO     reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_CADENA     reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_LARGO      reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_VACIO      reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_CARACTER   reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_FLOTANTE   reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    TIPO_DOUBLE     reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)
    $end            reduce using rule 98 (AStruct -> LLAVE_IZQ BStruct LLAVE_DER DStruct .)


state 169

    (103) DStruct -> IDENTIFICADOR . EStruct
    (104) EStruct -> . COMA DStruct
    (105) EStruct -> . PUNTO_COMA

    COMA            shift and go to state 208
    PUNTO_COMA      shift and go to state 209

    EStruct                        shift and go to state 207

state 170

    (100) BStruct -> STipos IDENTIFICADOR FStruct .

    LLAVE_DER       reduce using rule 100 (BStruct -> STipos IDENTIFICADOR FStruct .)


state 171

    (106) FStruct -> PUNTO_COMA . BStruct
    (99) BStruct -> . empty
    (100) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 210
    empty                          shift and go to state 78
    STipos                         shift and go to state 79

state 172

    (107) FStruct -> CORCHETE_IZQ . NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct

    NUMERO_ENTERO   shift and go to state 211


state 173

    (87) AArr -> NUMERO_ENTERO CORCHETE_DER . BArr
    (89) BArr -> . CArr
    (90) BArr -> . PUNTO_COMA
    (91) CArr -> . ASIGNAR LLAVE_IZQ DArr

    PUNTO_COMA      shift and go to state 214
    ASIGNAR         shift and go to state 175

    BArr                           shift and go to state 212
    CArr                           shift and go to state 213

state 174

    (88) AArr -> CORCHETE_DER CArr .

    IDENTIFICADOR   reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    CONDICIONAL     reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    BUCLE_MIENTRAS  reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    HACER           reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    BUCLE_PARA      reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    RETORNAR        reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    ROMPER          reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_ENTERO     reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_CADENA     reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_LARGO      reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_VACIO      reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_CARACTER   reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_FLOTANTE   reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    TIPO_DOUBLE     reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    $end            reduce using rule 88 (AArr -> CORCHETE_DER CArr .)
    LLAVE_DER       reduce using rule 88 (AArr -> CORCHETE_DER CArr .)


state 175

    (91) CArr -> ASIGNAR . LLAVE_IZQ DArr

    LLAVE_IZQ       shift and go to state 215


state 176

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR . SOpe PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 216
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 177

    (76) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ . AIfElse
    (77) AIfElse -> . SInst LLAVE_DER BIfElse
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    AIfElse                        shift and go to state 217
    SInst                          shift and go to state 218
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 178

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 219
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 179

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS . PAREN_IZQ SOpe PAREN_DER PUNTO_COMA

    PAREN_IZQ       shift and go to state 220


state 180

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe . PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PUNTO_COMA      shift and go to state 221


state 181

    (112) SDecVarFor -> STipos IDENTIFICADOR ADecVarFor .

    PUNTO_COMA      reduce using rule 112 (SDecVarFor -> STipos IDENTIFICADOR ADecVarFor .)


state 182

    (113) ADecVarFor -> ASIGNAR . BDecVarFor
    (115) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    BDecVarFor                     shift and go to state 222
    SOpe                           shift and go to state 223
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 183

    (114) ADecVarFor -> COMA . BDecVarFor
    (115) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    BDecVarFor                     shift and go to state 224
    SOpe                           shift and go to state 223
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 184

    (15) ZOpe -> SUMAR AOpe ZOpe .

    PUNTO_COMA      reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    PAREN_DER       reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    COMA            reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)
    LLAVE_DER       reduce using rule 15 (ZOpe -> SUMAR AOpe ZOpe .)


state 185

    (16) ZOpe -> RESTAR AOpe ZOpe .

    PUNTO_COMA      reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    PAREN_DER       reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    COMA            reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)
    LLAVE_DER       reduce using rule 16 (ZOpe -> RESTAR AOpe ZOpe .)


state 186

    (17) ZOpe -> COMPARAR_IGUAL AOpe ZOpe .

    PUNTO_COMA      reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    PAREN_DER       reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    COMA            reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)
    LLAVE_DER       reduce using rule 17 (ZOpe -> COMPARAR_IGUAL AOpe ZOpe .)


state 187

    (18) ZOpe -> MAYOR_QUE AOpe ZOpe .

    PUNTO_COMA      reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    PAREN_DER       reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    COMA            reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)
    LLAVE_DER       reduce using rule 18 (ZOpe -> MAYOR_QUE AOpe ZOpe .)


state 188

    (19) ZOpe -> MENOR_QUE AOpe ZOpe .

    PUNTO_COMA      reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    PAREN_DER       reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    COMA            reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)
    LLAVE_DER       reduce using rule 19 (ZOpe -> MENOR_QUE AOpe ZOpe .)


state 189

    (22) BOpe -> MULTIPLICAR COpe BOpe .

    SUMAR           reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    RESTAR          reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    MAYOR_QUE       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    MENOR_QUE       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    PUNTO_COMA      reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    PAREN_DER       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    COMA            reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)
    LLAVE_DER       reduce using rule 22 (BOpe -> MULTIPLICAR COpe BOpe .)


state 190

    (23) BOpe -> DIVIDIR COpe BOpe .

    SUMAR           reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    RESTAR          reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    MAYOR_QUE       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    MENOR_QUE       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    PUNTO_COMA      reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    PAREN_DER       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    COMA            reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)
    LLAVE_DER       reduce using rule 23 (BOpe -> DIVIDIR COpe BOpe .)


state 191

    (24) BOpe -> MODULO COpe BOpe .

    SUMAR           reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    RESTAR          reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    MAYOR_QUE       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    MENOR_QUE       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    PUNTO_COMA      reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    PAREN_DER       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    COMA            reduce using rule 24 (BOpe -> MODULO COpe BOpe .)
    LLAVE_DER       reduce using rule 24 (BOpe -> MODULO COpe BOpe .)


state 192

    (25) BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .

    SUMAR           reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    RESTAR          reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    MAYOR_QUE       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    MENOR_QUE       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    PUNTO_COMA      reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    PAREN_DER       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    COMA            reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)
    LLAVE_DER       reduce using rule 25 (BOpe -> AND_LOGICO_CONDICIONAL COpe BOpe .)


state 193

    (26) BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .

    SUMAR           reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    RESTAR          reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    COMPARAR_IGUAL  reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    MAYOR_QUE       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    MENOR_QUE       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    PUNTO_COMA      reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    PAREN_DER       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    COMA            reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)
    LLAVE_DER       reduce using rule 26 (BOpe -> OR_LOGICO_CONDICIONAL COpe BOpe .)


state 194

    (28) DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .

    MULTIPLICAR     reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    DIVIDIR         reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MODULO          reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    AND_LOGICO_CONDICIONAL reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    OR_LOGICO_CONDICIONAL reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    SUMAR           reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    RESTAR          reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    COMPARAR_IGUAL  reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MAYOR_QUE       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    MENOR_QUE       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    PUNTO_COMA      reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    PAREN_DER       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    COMA            reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)
    LLAVE_DER       reduce using rule 28 (DOpe -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER .)


state 195

    (57) HVar -> IDENTIFICADOR IVar .

    IDENTIFICADOR   reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    ESTRUCTURA      reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_ENTERO     reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_CADENA     reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_LARGO      reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_VACIO      reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_CARACTER   reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_FLOTANTE   reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    TIPO_DOUBLE     reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    $end            reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    CONDICIONAL     reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    BUCLE_MIENTRAS  reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    HACER           reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    BUCLE_PARA      reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    RETORNAR        reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    ROMPER          reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)
    LLAVE_DER       reduce using rule 57 (HVar -> IDENTIFICADOR IVar .)


state 196

    (59) IVar -> COMA GVar .

    IDENTIFICADOR   reduce using rule 59 (IVar -> COMA GVar .)
    ESTRUCTURA      reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_ENTERO     reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_CADENA     reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_LARGO      reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_VACIO      reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_CARACTER   reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_FLOTANTE   reduce using rule 59 (IVar -> COMA GVar .)
    TIPO_DOUBLE     reduce using rule 59 (IVar -> COMA GVar .)
    $end            reduce using rule 59 (IVar -> COMA GVar .)
    CONDICIONAL     reduce using rule 59 (IVar -> COMA GVar .)
    BUCLE_MIENTRAS  reduce using rule 59 (IVar -> COMA GVar .)
    HACER           reduce using rule 59 (IVar -> COMA GVar .)
    BUCLE_PARA      reduce using rule 59 (IVar -> COMA GVar .)
    RETORNAR        reduce using rule 59 (IVar -> COMA GVar .)
    ROMPER          reduce using rule 59 (IVar -> COMA GVar .)
    LLAVE_DER       reduce using rule 59 (IVar -> COMA GVar .)


state 197

    (60) IVar -> PAREN_DER JVar .

    IDENTIFICADOR   reduce using rule 60 (IVar -> PAREN_DER JVar .)
    ESTRUCTURA      reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_ENTERO     reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_CADENA     reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_LARGO      reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_VACIO      reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_CARACTER   reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_FLOTANTE   reduce using rule 60 (IVar -> PAREN_DER JVar .)
    TIPO_DOUBLE     reduce using rule 60 (IVar -> PAREN_DER JVar .)
    $end            reduce using rule 60 (IVar -> PAREN_DER JVar .)
    CONDICIONAL     reduce using rule 60 (IVar -> PAREN_DER JVar .)
    BUCLE_MIENTRAS  reduce using rule 60 (IVar -> PAREN_DER JVar .)
    HACER           reduce using rule 60 (IVar -> PAREN_DER JVar .)
    BUCLE_PARA      reduce using rule 60 (IVar -> PAREN_DER JVar .)
    RETORNAR        reduce using rule 60 (IVar -> PAREN_DER JVar .)
    ROMPER          reduce using rule 60 (IVar -> PAREN_DER JVar .)
    LLAVE_DER       reduce using rule 60 (IVar -> PAREN_DER JVar .)


state 198

    (62) JVar -> LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 225


state 199

    (47) CVar -> COMA BVar .

    IDENTIFICADOR   reduce using rule 47 (CVar -> COMA BVar .)
    ESTRUCTURA      reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_ENTERO     reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_CADENA     reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_LARGO      reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_VACIO      reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_CARACTER   reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_FLOTANTE   reduce using rule 47 (CVar -> COMA BVar .)
    TIPO_DOUBLE     reduce using rule 47 (CVar -> COMA BVar .)
    $end            reduce using rule 47 (CVar -> COMA BVar .)
    CONDICIONAL     reduce using rule 47 (CVar -> COMA BVar .)
    BUCLE_MIENTRAS  reduce using rule 47 (CVar -> COMA BVar .)
    HACER           reduce using rule 47 (CVar -> COMA BVar .)
    BUCLE_PARA      reduce using rule 47 (CVar -> COMA BVar .)
    RETORNAR        reduce using rule 47 (CVar -> COMA BVar .)
    ROMPER          reduce using rule 47 (CVar -> COMA BVar .)
    LLAVE_DER       reduce using rule 47 (CVar -> COMA BVar .)


state 200

    (45) BVar -> IDENTIFICADOR SFunc AVar .

    IDENTIFICADOR   reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    ESTRUCTURA      reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_ENTERO     reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_CADENA     reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_LARGO      reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_VACIO      reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_CARACTER   reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_FLOTANTE   reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    TIPO_DOUBLE     reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    $end            reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    CONDICIONAL     reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    BUCLE_MIENTRAS  reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    HACER           reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    BUCLE_PARA      reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    RETORNAR        reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    ROMPER          reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)
    LLAVE_DER       reduce using rule 45 (BVar -> IDENTIFICADOR SFunc AVar .)


state 201

    (73) AFunc -> IDENTIFICADOR BFunc .

    ASIGNAR         reduce using rule 73 (AFunc -> IDENTIFICADOR BFunc .)
    PUNTO_COMA      reduce using rule 73 (AFunc -> IDENTIFICADOR BFunc .)
    COMA            reduce using rule 73 (AFunc -> IDENTIFICADOR BFunc .)


state 202

    (74) BFunc -> COMA . IDENTIFICADOR BFunc

    IDENTIFICADOR   shift and go to state 226


state 203

    (75) BFunc -> PAREN_DER .

    ASIGNAR         reduce using rule 75 (BFunc -> PAREN_DER .)
    PUNTO_COMA      reduce using rule 75 (BFunc -> PAREN_DER .)
    COMA            reduce using rule 75 (BFunc -> PAREN_DER .)


state 204

    (97) AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .

    IDENTIFICADOR   reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    CONDICIONAL     reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    BUCLE_MIENTRAS  reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    HACER           reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    BUCLE_PARA      reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    RETORNAR        reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    ROMPER          reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_ENTERO     reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_CADENA     reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_LARGO      reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_VACIO      reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_CARACTER   reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_FLOTANTE   reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    TIPO_DOUBLE     reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)
    $end            reduce using rule 97 (AStruct -> IDENTIFICADOR LLAVE_IZQ BStruct LLAVE_DER CStruct .)


state 205

    (101) CStruct -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 101 (CStruct -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 101 (CStruct -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 101 (CStruct -> PUNTO_COMA .)
    HACER           reduce using rule 101 (CStruct -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 101 (CStruct -> PUNTO_COMA .)
    RETORNAR        reduce using rule 101 (CStruct -> PUNTO_COMA .)
    ROMPER          reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 101 (CStruct -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 101 (CStruct -> PUNTO_COMA .)
    $end            reduce using rule 101 (CStruct -> PUNTO_COMA .)


state 206

    (102) CStruct -> DStruct .

    IDENTIFICADOR   reduce using rule 102 (CStruct -> DStruct .)
    CONDICIONAL     reduce using rule 102 (CStruct -> DStruct .)
    BUCLE_MIENTRAS  reduce using rule 102 (CStruct -> DStruct .)
    HACER           reduce using rule 102 (CStruct -> DStruct .)
    BUCLE_PARA      reduce using rule 102 (CStruct -> DStruct .)
    RETORNAR        reduce using rule 102 (CStruct -> DStruct .)
    ROMPER          reduce using rule 102 (CStruct -> DStruct .)
    TIPO_ENTERO     reduce using rule 102 (CStruct -> DStruct .)
    TIPO_CADENA     reduce using rule 102 (CStruct -> DStruct .)
    TIPO_LARGO      reduce using rule 102 (CStruct -> DStruct .)
    TIPO_VACIO      reduce using rule 102 (CStruct -> DStruct .)
    TIPO_CARACTER   reduce using rule 102 (CStruct -> DStruct .)
    TIPO_FLOTANTE   reduce using rule 102 (CStruct -> DStruct .)
    TIPO_DOUBLE     reduce using rule 102 (CStruct -> DStruct .)
    $end            reduce using rule 102 (CStruct -> DStruct .)


state 207

    (103) DStruct -> IDENTIFICADOR EStruct .

    IDENTIFICADOR   reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    CONDICIONAL     reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    BUCLE_MIENTRAS  reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    HACER           reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    BUCLE_PARA      reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    RETORNAR        reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    ROMPER          reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_ENTERO     reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_CADENA     reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_LARGO      reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_VACIO      reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_CARACTER   reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_FLOTANTE   reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    TIPO_DOUBLE     reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)
    $end            reduce using rule 103 (DStruct -> IDENTIFICADOR EStruct .)


state 208

    (104) EStruct -> COMA . DStruct
    (103) DStruct -> . IDENTIFICADOR EStruct

    IDENTIFICADOR   shift and go to state 169

    DStruct                        shift and go to state 227

state 209

    (105) EStruct -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 105 (EStruct -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 105 (EStruct -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 105 (EStruct -> PUNTO_COMA .)
    HACER           reduce using rule 105 (EStruct -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 105 (EStruct -> PUNTO_COMA .)
    RETORNAR        reduce using rule 105 (EStruct -> PUNTO_COMA .)
    ROMPER          reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 105 (EStruct -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 105 (EStruct -> PUNTO_COMA .)
    $end            reduce using rule 105 (EStruct -> PUNTO_COMA .)


state 210

    (106) FStruct -> PUNTO_COMA BStruct .

    LLAVE_DER       reduce using rule 106 (FStruct -> PUNTO_COMA BStruct .)


state 211

    (107) FStruct -> CORCHETE_IZQ NUMERO_ENTERO . CORCHETE_DER PUNTO_COMA BStruct

    CORCHETE_DER    shift and go to state 228


state 212

    (87) AArr -> NUMERO_ENTERO CORCHETE_DER BArr .

    IDENTIFICADOR   reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    CONDICIONAL     reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    BUCLE_MIENTRAS  reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    HACER           reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    BUCLE_PARA      reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    RETORNAR        reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    ROMPER          reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_ENTERO     reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_CADENA     reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_LARGO      reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_VACIO      reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_CARACTER   reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_FLOTANTE   reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    TIPO_DOUBLE     reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    $end            reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)
    LLAVE_DER       reduce using rule 87 (AArr -> NUMERO_ENTERO CORCHETE_DER BArr .)


state 213

    (89) BArr -> CArr .

    IDENTIFICADOR   reduce using rule 89 (BArr -> CArr .)
    CONDICIONAL     reduce using rule 89 (BArr -> CArr .)
    BUCLE_MIENTRAS  reduce using rule 89 (BArr -> CArr .)
    HACER           reduce using rule 89 (BArr -> CArr .)
    BUCLE_PARA      reduce using rule 89 (BArr -> CArr .)
    RETORNAR        reduce using rule 89 (BArr -> CArr .)
    ROMPER          reduce using rule 89 (BArr -> CArr .)
    TIPO_ENTERO     reduce using rule 89 (BArr -> CArr .)
    TIPO_CADENA     reduce using rule 89 (BArr -> CArr .)
    TIPO_LARGO      reduce using rule 89 (BArr -> CArr .)
    TIPO_VACIO      reduce using rule 89 (BArr -> CArr .)
    TIPO_CARACTER   reduce using rule 89 (BArr -> CArr .)
    TIPO_FLOTANTE   reduce using rule 89 (BArr -> CArr .)
    TIPO_DOUBLE     reduce using rule 89 (BArr -> CArr .)
    $end            reduce using rule 89 (BArr -> CArr .)
    LLAVE_DER       reduce using rule 89 (BArr -> CArr .)


state 214

    (90) BArr -> PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 90 (BArr -> PUNTO_COMA .)
    CONDICIONAL     reduce using rule 90 (BArr -> PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 90 (BArr -> PUNTO_COMA .)
    HACER           reduce using rule 90 (BArr -> PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 90 (BArr -> PUNTO_COMA .)
    RETORNAR        reduce using rule 90 (BArr -> PUNTO_COMA .)
    ROMPER          reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 90 (BArr -> PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 90 (BArr -> PUNTO_COMA .)
    $end            reduce using rule 90 (BArr -> PUNTO_COMA .)
    LLAVE_DER       reduce using rule 90 (BArr -> PUNTO_COMA .)


state 215

    (91) CArr -> ASIGNAR LLAVE_IZQ . DArr
    (92) DArr -> . SOpe EArr
    (93) DArr -> . CARACTER EArr
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 231
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    DArr                           shift and go to state 229
    SOpe                           shift and go to state 230
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 216

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe . PUNTO_COMA

    PUNTO_COMA      shift and go to state 232


state 217

    (76) SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .

    IDENTIFICADOR   reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    CONDICIONAL     reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    BUCLE_MIENTRAS  reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    HACER           reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    BUCLE_PARA      reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    RETORNAR        reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    ROMPER          reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_ENTERO     reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_CADENA     reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_LARGO      reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_VACIO      reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_CARACTER   reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_FLOTANTE   reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    TIPO_DOUBLE     reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    $end            reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)
    LLAVE_DER       reduce using rule 76 (SIfElse -> CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse .)


state 218

    (77) AIfElse -> SInst . LLAVE_DER BIfElse

    LLAVE_DER       shift and go to state 233


state 219

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 234


state 220

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ . SOpe PAREN_DER PUNTO_COMA
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 235
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 221

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA . SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (111) SAsigVarFor -> . IDENTIFICADOR ASIGNAR SOpe

    IDENTIFICADOR   shift and go to state 237

    SAsigVarFor                    shift and go to state 236

state 222

    (113) ADecVarFor -> ASIGNAR BDecVarFor .

    PUNTO_COMA      reduce using rule 113 (ADecVarFor -> ASIGNAR BDecVarFor .)


state 223

    (115) BDecVarFor -> SOpe . CDecVarFor
    (116) CDecVarFor -> . COMA BDecVarFor
    (117) CDecVarFor -> . empty
    (4) empty -> .

    COMA            shift and go to state 239
    PUNTO_COMA      reduce using rule 4 (empty -> .)

    CDecVarFor                     shift and go to state 238
    empty                          shift and go to state 240

state 224

    (114) ADecVarFor -> COMA BDecVarFor .

    PUNTO_COMA      reduce using rule 114 (ADecVarFor -> COMA BDecVarFor .)


state 225

    (62) JVar -> LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    ESTRUCTURA      reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 62 (JVar -> LLAVE_IZQ SInst LLAVE_DER .)


state 226

    (74) BFunc -> COMA IDENTIFICADOR . BFunc
    (74) BFunc -> . COMA IDENTIFICADOR BFunc
    (75) BFunc -> . PAREN_DER

    COMA            shift and go to state 202
    PAREN_DER       shift and go to state 203

    BFunc                          shift and go to state 241

state 227

    (104) EStruct -> COMA DStruct .

    IDENTIFICADOR   reduce using rule 104 (EStruct -> COMA DStruct .)
    CONDICIONAL     reduce using rule 104 (EStruct -> COMA DStruct .)
    BUCLE_MIENTRAS  reduce using rule 104 (EStruct -> COMA DStruct .)
    HACER           reduce using rule 104 (EStruct -> COMA DStruct .)
    BUCLE_PARA      reduce using rule 104 (EStruct -> COMA DStruct .)
    RETORNAR        reduce using rule 104 (EStruct -> COMA DStruct .)
    ROMPER          reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_ENTERO     reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_CADENA     reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_LARGO      reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_VACIO      reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_CARACTER   reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_FLOTANTE   reduce using rule 104 (EStruct -> COMA DStruct .)
    TIPO_DOUBLE     reduce using rule 104 (EStruct -> COMA DStruct .)
    $end            reduce using rule 104 (EStruct -> COMA DStruct .)


state 228

    (107) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER . PUNTO_COMA BStruct

    PUNTO_COMA      shift and go to state 242


state 229

    (91) CArr -> ASIGNAR LLAVE_IZQ DArr .

    IDENTIFICADOR   reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    CONDICIONAL     reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    BUCLE_MIENTRAS  reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    HACER           reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    BUCLE_PARA      reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    RETORNAR        reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    ROMPER          reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_ENTERO     reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_CADENA     reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_LARGO      reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_VACIO      reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_CARACTER   reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_FLOTANTE   reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    TIPO_DOUBLE     reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    $end            reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)
    LLAVE_DER       reduce using rule 91 (CArr -> ASIGNAR LLAVE_IZQ DArr .)


state 230

    (92) DArr -> SOpe . EArr
    (94) EArr -> . COMA DArr
    (95) EArr -> . LLAVE_DER PUNTO_COMA

    COMA            shift and go to state 244
    LLAVE_DER       shift and go to state 245

    EArr                           shift and go to state 243

state 231

    (93) DArr -> CARACTER . EArr
    (94) EArr -> . COMA DArr
    (95) EArr -> . LLAVE_DER PUNTO_COMA

    COMA            shift and go to state 244
    LLAVE_DER       shift and go to state 245

    EArr                           shift and go to state 246

state 232

    (85) SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    CONDICIONAL     reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    HACER           reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    RETORNAR        reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    ROMPER          reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    $end            reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)
    LLAVE_DER       reduce using rule 85 (SArr -> IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA .)


state 233

    (77) AIfElse -> SInst LLAVE_DER . BIfElse
    (78) BIfElse -> . CASO_CONTRARIO CIfElse
    (79) BIfElse -> . empty
    (4) empty -> .

    CASO_CONTRARIO  shift and go to state 248
    IDENTIFICADOR   reduce using rule 4 (empty -> .)
    CONDICIONAL     reduce using rule 4 (empty -> .)
    BUCLE_MIENTRAS  reduce using rule 4 (empty -> .)
    HACER           reduce using rule 4 (empty -> .)
    BUCLE_PARA      reduce using rule 4 (empty -> .)
    RETORNAR        reduce using rule 4 (empty -> .)
    ROMPER          reduce using rule 4 (empty -> .)
    TIPO_ENTERO     reduce using rule 4 (empty -> .)
    TIPO_CADENA     reduce using rule 4 (empty -> .)
    TIPO_LARGO      reduce using rule 4 (empty -> .)
    TIPO_VACIO      reduce using rule 4 (empty -> .)
    TIPO_CARACTER   reduce using rule 4 (empty -> .)
    TIPO_FLOTANTE   reduce using rule 4 (empty -> .)
    TIPO_DOUBLE     reduce using rule 4 (empty -> .)
    $end            reduce using rule 4 (empty -> .)
    LLAVE_DER       reduce using rule 4 (empty -> .)

    BIfElse                        shift and go to state 247
    empty                          shift and go to state 249

state 234

    (108) SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 108 (SWhile -> BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)


state 235

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe . PAREN_DER PUNTO_COMA

    PAREN_DER       shift and go to state 250


state 236

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor . PAREN_DER LLAVE_IZQ SInst LLAVE_DER

    PAREN_DER       shift and go to state 251


state 237

    (111) SAsigVarFor -> IDENTIFICADOR . ASIGNAR SOpe

    ASIGNAR         shift and go to state 252


state 238

    (115) BDecVarFor -> SOpe CDecVarFor .

    PUNTO_COMA      reduce using rule 115 (BDecVarFor -> SOpe CDecVarFor .)


state 239

    (116) CDecVarFor -> COMA . BDecVarFor
    (115) BDecVarFor -> . SOpe CDecVarFor
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    BDecVarFor                     shift and go to state 253
    SOpe                           shift and go to state 223
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 240

    (117) CDecVarFor -> empty .

    PUNTO_COMA      reduce using rule 117 (CDecVarFor -> empty .)


state 241

    (74) BFunc -> COMA IDENTIFICADOR BFunc .

    ASIGNAR         reduce using rule 74 (BFunc -> COMA IDENTIFICADOR BFunc .)
    PUNTO_COMA      reduce using rule 74 (BFunc -> COMA IDENTIFICADOR BFunc .)
    COMA            reduce using rule 74 (BFunc -> COMA IDENTIFICADOR BFunc .)


state 242

    (107) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA . BStruct
    (99) BStruct -> . empty
    (100) BStruct -> . STipos IDENTIFICADOR FStruct
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    BStruct                        shift and go to state 254
    empty                          shift and go to state 78
    STipos                         shift and go to state 79

state 243

    (92) DArr -> SOpe EArr .

    IDENTIFICADOR   reduce using rule 92 (DArr -> SOpe EArr .)
    CONDICIONAL     reduce using rule 92 (DArr -> SOpe EArr .)
    BUCLE_MIENTRAS  reduce using rule 92 (DArr -> SOpe EArr .)
    HACER           reduce using rule 92 (DArr -> SOpe EArr .)
    BUCLE_PARA      reduce using rule 92 (DArr -> SOpe EArr .)
    RETORNAR        reduce using rule 92 (DArr -> SOpe EArr .)
    ROMPER          reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_ENTERO     reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_CADENA     reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_LARGO      reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_VACIO      reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_CARACTER   reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_FLOTANTE   reduce using rule 92 (DArr -> SOpe EArr .)
    TIPO_DOUBLE     reduce using rule 92 (DArr -> SOpe EArr .)
    $end            reduce using rule 92 (DArr -> SOpe EArr .)
    LLAVE_DER       reduce using rule 92 (DArr -> SOpe EArr .)


state 244

    (94) EArr -> COMA . DArr
    (92) DArr -> . SOpe EArr
    (93) DArr -> . CARACTER EArr
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    CARACTER        shift and go to state 231
    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    DArr                           shift and go to state 255
    SOpe                           shift and go to state 230
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 245

    (95) EArr -> LLAVE_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 256


state 246

    (93) DArr -> CARACTER EArr .

    IDENTIFICADOR   reduce using rule 93 (DArr -> CARACTER EArr .)
    CONDICIONAL     reduce using rule 93 (DArr -> CARACTER EArr .)
    BUCLE_MIENTRAS  reduce using rule 93 (DArr -> CARACTER EArr .)
    HACER           reduce using rule 93 (DArr -> CARACTER EArr .)
    BUCLE_PARA      reduce using rule 93 (DArr -> CARACTER EArr .)
    RETORNAR        reduce using rule 93 (DArr -> CARACTER EArr .)
    ROMPER          reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_ENTERO     reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_CADENA     reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_LARGO      reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_VACIO      reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_CARACTER   reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_FLOTANTE   reduce using rule 93 (DArr -> CARACTER EArr .)
    TIPO_DOUBLE     reduce using rule 93 (DArr -> CARACTER EArr .)
    $end            reduce using rule 93 (DArr -> CARACTER EArr .)
    LLAVE_DER       reduce using rule 93 (DArr -> CARACTER EArr .)


state 247

    (77) AIfElse -> SInst LLAVE_DER BIfElse .

    IDENTIFICADOR   reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    CONDICIONAL     reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    BUCLE_MIENTRAS  reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    HACER           reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    BUCLE_PARA      reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    RETORNAR        reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    ROMPER          reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_ENTERO     reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_CADENA     reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_LARGO      reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_VACIO      reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_CARACTER   reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_FLOTANTE   reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    TIPO_DOUBLE     reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    $end            reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)
    LLAVE_DER       reduce using rule 77 (AIfElse -> SInst LLAVE_DER BIfElse .)


state 248

    (78) BIfElse -> CASO_CONTRARIO . CIfElse
    (80) CIfElse -> . LLAVE_IZQ AIfElse
    (81) CIfElse -> . SIfElse
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse

    LLAVE_IZQ       shift and go to state 258
    CONDICIONAL     shift and go to state 28

    CIfElse                        shift and go to state 257
    SIfElse                        shift and go to state 259

state 249

    (79) BIfElse -> empty .

    IDENTIFICADOR   reduce using rule 79 (BIfElse -> empty .)
    CONDICIONAL     reduce using rule 79 (BIfElse -> empty .)
    BUCLE_MIENTRAS  reduce using rule 79 (BIfElse -> empty .)
    HACER           reduce using rule 79 (BIfElse -> empty .)
    BUCLE_PARA      reduce using rule 79 (BIfElse -> empty .)
    RETORNAR        reduce using rule 79 (BIfElse -> empty .)
    ROMPER          reduce using rule 79 (BIfElse -> empty .)
    TIPO_ENTERO     reduce using rule 79 (BIfElse -> empty .)
    TIPO_CADENA     reduce using rule 79 (BIfElse -> empty .)
    TIPO_LARGO      reduce using rule 79 (BIfElse -> empty .)
    TIPO_VACIO      reduce using rule 79 (BIfElse -> empty .)
    TIPO_CARACTER   reduce using rule 79 (BIfElse -> empty .)
    TIPO_FLOTANTE   reduce using rule 79 (BIfElse -> empty .)
    TIPO_DOUBLE     reduce using rule 79 (BIfElse -> empty .)
    $end            reduce using rule 79 (BIfElse -> empty .)
    LLAVE_DER       reduce using rule 79 (BIfElse -> empty .)


state 250

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER . PUNTO_COMA

    PUNTO_COMA      shift and go to state 260


state 251

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER . LLAVE_IZQ SInst LLAVE_DER

    LLAVE_IZQ       shift and go to state 261


state 252

    (111) SAsigVarFor -> IDENTIFICADOR ASIGNAR . SOpe
    (14) SOpe -> . AOpe ZOpe
    (21) AOpe -> . COpe BOpe
    (30) COpe -> . PAREN_IZQ SOpe PAREN_DER
    (31) COpe -> . EOpe
    (32) COpe -> . NUMERO_DECIMAL
    (33) COpe -> . NUMERO_ENTERO
    (34) EOpe -> . IDENTIFICADOR FOpe

    PAREN_IZQ       shift and go to state 60
    NUMERO_DECIMAL  shift and go to state 62
    NUMERO_ENTERO   shift and go to state 63
    IDENTIFICADOR   shift and go to state 64

    SOpe                           shift and go to state 262
    AOpe                           shift and go to state 58
    COpe                           shift and go to state 59
    EOpe                           shift and go to state 61

state 253

    (116) CDecVarFor -> COMA BDecVarFor .

    PUNTO_COMA      reduce using rule 116 (CDecVarFor -> COMA BDecVarFor .)


state 254

    (107) FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct .

    LLAVE_DER       reduce using rule 107 (FStruct -> CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER PUNTO_COMA BStruct .)


state 255

    (94) EArr -> COMA DArr .

    IDENTIFICADOR   reduce using rule 94 (EArr -> COMA DArr .)
    CONDICIONAL     reduce using rule 94 (EArr -> COMA DArr .)
    BUCLE_MIENTRAS  reduce using rule 94 (EArr -> COMA DArr .)
    HACER           reduce using rule 94 (EArr -> COMA DArr .)
    BUCLE_PARA      reduce using rule 94 (EArr -> COMA DArr .)
    RETORNAR        reduce using rule 94 (EArr -> COMA DArr .)
    ROMPER          reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_ENTERO     reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_CADENA     reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_LARGO      reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_VACIO      reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_CARACTER   reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_FLOTANTE   reduce using rule 94 (EArr -> COMA DArr .)
    TIPO_DOUBLE     reduce using rule 94 (EArr -> COMA DArr .)
    $end            reduce using rule 94 (EArr -> COMA DArr .)
    LLAVE_DER       reduce using rule 94 (EArr -> COMA DArr .)


state 256

    (95) EArr -> LLAVE_DER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    HACER           reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    RETORNAR        reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    ROMPER          reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    $end            reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 95 (EArr -> LLAVE_DER PUNTO_COMA .)


state 257

    (78) BIfElse -> CASO_CONTRARIO CIfElse .

    IDENTIFICADOR   reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    CONDICIONAL     reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    BUCLE_MIENTRAS  reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    HACER           reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    BUCLE_PARA      reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    RETORNAR        reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    ROMPER          reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_ENTERO     reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_CADENA     reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_LARGO      reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_VACIO      reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_CARACTER   reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_FLOTANTE   reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    TIPO_DOUBLE     reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    $end            reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)
    LLAVE_DER       reduce using rule 78 (BIfElse -> CASO_CONTRARIO CIfElse .)


state 258

    (80) CIfElse -> LLAVE_IZQ . AIfElse
    (77) AIfElse -> . SInst LLAVE_DER BIfElse
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    AIfElse                        shift and go to state 263
    SInst                          shift and go to state 218
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 259

    (81) CIfElse -> SIfElse .

    IDENTIFICADOR   reduce using rule 81 (CIfElse -> SIfElse .)
    CONDICIONAL     reduce using rule 81 (CIfElse -> SIfElse .)
    BUCLE_MIENTRAS  reduce using rule 81 (CIfElse -> SIfElse .)
    HACER           reduce using rule 81 (CIfElse -> SIfElse .)
    BUCLE_PARA      reduce using rule 81 (CIfElse -> SIfElse .)
    RETORNAR        reduce using rule 81 (CIfElse -> SIfElse .)
    ROMPER          reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_ENTERO     reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_CADENA     reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_LARGO      reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_VACIO      reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_CARACTER   reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_FLOTANTE   reduce using rule 81 (CIfElse -> SIfElse .)
    TIPO_DOUBLE     reduce using rule 81 (CIfElse -> SIfElse .)
    $end            reduce using rule 81 (CIfElse -> SIfElse .)
    LLAVE_DER       reduce using rule 81 (CIfElse -> SIfElse .)


state 260

    (109) SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .

    IDENTIFICADOR   reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    CONDICIONAL     reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    BUCLE_MIENTRAS  reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    HACER           reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    BUCLE_PARA      reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    RETORNAR        reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    ROMPER          reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_ENTERO     reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_CADENA     reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_LARGO      reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_VACIO      reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_CARACTER   reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_FLOTANTE   reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    TIPO_DOUBLE     reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    $end            reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)
    LLAVE_DER       reduce using rule 109 (SDoWhile -> HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA .)


state 261

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ . SInst LLAVE_DER
    (5) SInst -> . SVar SInst
    (6) SInst -> . SIfElse SInst
    (7) SInst -> . SWhile SInst
    (8) SInst -> . SDoWhile SInst
    (9) SInst -> . SFor SInst
    (10) SInst -> . SRet SInst
    (11) SInst -> . SArr SInst
    (12) SInst -> . SBreak SInst
    (13) SInst -> . empty
    (38) SVar -> . STipos IDENTIFICADOR FVar
    (39) SVar -> . IDENTIFICADOR DVar
    (76) SIfElse -> . CONDICIONAL PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ AIfElse
    (108) SWhile -> . BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (109) SDoWhile -> . HACER LLAVE_IZQ SInst LLAVE_DER BUCLE_MIENTRAS PAREN_IZQ SOpe PAREN_DER PUNTO_COMA
    (110) SFor -> . BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER
    (82) SRet -> . RETORNAR ARet
    (85) SArr -> . IDENTIFICADOR CORCHETE_IZQ NUMERO_ENTERO CORCHETE_DER ASIGNAR SOpe PUNTO_COMA
    (86) SArr -> . STipos IDENTIFICADOR CORCHETE_IZQ AArr
    (118) SBreak -> . ROMPER PUNTO_COMA
    (4) empty -> .
    (63) STipos -> . TIPO_ENTERO
    (64) STipos -> . TIPO_CADENA
    (65) STipos -> . TIPO_LARGO
    (66) STipos -> . TIPO_VACIO
    (67) STipos -> . TIPO_CARACTER
    (68) STipos -> . TIPO_FLOTANTE
    (69) STipos -> . TIPO_DOUBLE

    IDENTIFICADOR   shift and go to state 27
    CONDICIONAL     shift and go to state 28
    BUCLE_MIENTRAS  shift and go to state 29
    HACER           shift and go to state 30
    BUCLE_PARA      shift and go to state 31
    RETORNAR        shift and go to state 32
    ROMPER          shift and go to state 33
    LLAVE_DER       reduce using rule 4 (empty -> .)
    TIPO_ENTERO     shift and go to state 8
    TIPO_CADENA     shift and go to state 9
    TIPO_LARGO      shift and go to state 10
    TIPO_VACIO      shift and go to state 11
    TIPO_CARACTER   shift and go to state 12
    TIPO_FLOTANTE   shift and go to state 13
    TIPO_DOUBLE     shift and go to state 14

    SInst                          shift and go to state 264
    SVar                           shift and go to state 17
    SIfElse                        shift and go to state 18
    SWhile                         shift and go to state 19
    SDoWhile                       shift and go to state 20
    SFor                           shift and go to state 21
    SRet                           shift and go to state 22
    SArr                           shift and go to state 23
    SBreak                         shift and go to state 24
    empty                          shift and go to state 25
    STipos                         shift and go to state 26

state 262

    (111) SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe .

    PAREN_DER       reduce using rule 111 (SAsigVarFor -> IDENTIFICADOR ASIGNAR SOpe .)


state 263

    (80) CIfElse -> LLAVE_IZQ AIfElse .

    IDENTIFICADOR   reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    CONDICIONAL     reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    BUCLE_MIENTRAS  reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    HACER           reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    BUCLE_PARA      reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    RETORNAR        reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    ROMPER          reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_ENTERO     reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_CADENA     reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_LARGO      reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_VACIO      reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_CARACTER   reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_FLOTANTE   reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    TIPO_DOUBLE     reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    $end            reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)
    LLAVE_DER       reduce using rule 80 (CIfElse -> LLAVE_IZQ AIfElse .)


state 264

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst . LLAVE_DER

    LLAVE_DER       shift and go to state 265


state 265

    (110) SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .

    IDENTIFICADOR   reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    CONDICIONAL     reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_MIENTRAS  reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    HACER           reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    BUCLE_PARA      reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    RETORNAR        reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    ROMPER          reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_ENTERO     reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CADENA     reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_LARGO      reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_VACIO      reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_CARACTER   reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_FLOTANTE   reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    TIPO_DOUBLE     reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    $end            reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)
    LLAVE_DER       reduce using rule 110 (SFor -> BUCLE_PARA PAREN_IZQ SDecVarFor PUNTO_COMA SOpe PUNTO_COMA SAsigVarFor PAREN_DER LLAVE_IZQ SInst LLAVE_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 122 resolved using rule (DOpe -> empty)
WARNING: rejected rule (SFunc -> empty) in state 122
